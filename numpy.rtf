{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 Verdana;\f1\fmodern\fcharset0 Courier;\f2\fswiss\fcharset0 Helvetica;
\f3\fswiss\fcharset0 Helvetica-Light;\f4\fnil\fcharset0 STIXGeneral-Regular;\f5\froman\fcharset0 Times-Roman;
}
{\colortbl;\red255\green255\blue255;\red46\green46\blue46;\red26\green26\blue26;\red76\green76\blue76;
\red246\green246\blue246;\red99\green99\blue99;\red38\green38\blue38;\red237\green237\blue237;\red252\green251\blue251;
\red12\green99\blue160;\red0\green57\blue84;\red44\green44\blue44;\red44\green154\blue192;\red230\green241\blue245;
\red123\green83\blue30;\red93\green193\blue237;\red187\green81\blue85;\red44\green44\blue44;\red255\green255\blue255;
\red44\green154\blue192;\red230\green241\blue245;\red38\green38\blue38;\red123\green83\blue30;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid701\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid901\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1301\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid14}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl460\partightenfactor0

\f0\fs38 \cf2 \expnd0\expndtw0\kerning0
REVIEW QUESTION 1
\fs32 \cf3  \cf4 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf3 What's the Numpy function to create an array?\
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb5 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 arr()
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
 
\f1\fs22 \cb5 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 numpy()
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
 
\f1\fs22 \cb5 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 array()
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  \
\pard\pardeftab720\sl384\partightenfactor0
\cf0 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 <code>array()</code> - correct\
\pard\pardeftab720\sl384\partightenfactor0
\cf2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb5 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 np()
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf6 \shad0 EXPLANATION\
\pard\pardeftab720\sl448\partightenfactor0

\b0\fs32 \cf3 To create a Numpy array, you use the 
\f1\fs28 \cb5 array()
\f0\fs32 \cb1  function. You typically pass a regular Python list as an input.\
\pard\pardeftab720\sl300\partightenfactor0

\f2\b\fs26 \cf7 \cb8 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 FINAL CHECK\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf0 \cb1 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf3 \shad0  
\f2\b\fs26 \cf1 \cb10 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 SAVE\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf0 \cb1 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf3 \shad0  \
\pard\pardeftab720\sl300\qc\partightenfactor0

\f2\b\fs26 \cf0 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 TOGGLE ANSWER VISIBILITY\
\pard\pardeftab720\sl300\partightenfactor0
\cf7 \cb8 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 HIDE ANSWER
\f0\b0\fs32 \cf3 \cb1 \shad0  
\i \cf4 You have used 1 of 2 submissions
\i0 \cf3 \
\pard\pardeftab720\sl460\partightenfactor0

\fs38 \cf2 REVIEW QUESTION 2
\fs32 \cf3  \cf4 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf3 Filip explained the difference between regular Python lists and Numpy arrays. Which two statements describe the advantage of Numpy Package over regular Python Lists?\
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  It is easier to create a Numpy array than a regular Python list.\
 The Numpy Package provides the 
\f1\fs22 \cb5 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 array
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 , a data type that can be used to do element-wise calculations. \
 Because Numpy arrays can only hold element of a single type, calculations on Numpy arrays can be carried out way faster than regular Python lists. \
 You can store both strings and integers in a Numpy array at the same time.\
\pard\pardeftab720\sl448\partightenfactor0

\fs32 \cf0 \shad0 The Numpy Package provides the
\f1\fs28 \cb5 array
\f0\fs32 \cb1 , a data type that can be used to do element-wise calculations., Because Numpy arrays can only hold element of a single type, calculations on Numpy arrays can be carried out way faster than regular Python lists., - correct\
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf6 EXPLANATION\
\pard\pardeftab720\sl448\partightenfactor0

\b0\fs32 \cf3 Creating a Numpy array is not necessarily easier, but it is a great solution if you want to carry out element-wise calculations, something that regular Python lists aren't capable of.\
\pard\pardeftab720\sl300\partightenfactor0

\f2\b\fs26 \cf7 \cb8 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 FINAL CHECK\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf0 \cb1 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf3 \shad0  
\f2\b\fs26 \cf1 \cb10 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 SAVE\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf0 \cb1 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf3 \shad0  \
\pard\pardeftab720\sl300\qc\partightenfactor0

\f2\b\fs26 \cf0 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 TOGGLE ANSWER VISIBILITY\
\pard\pardeftab720\sl300\partightenfactor0
\cf7 \cb8 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 HIDE ANSWER
\f0\b0\fs32 \cf3 \cb1 \shad0  
\i \cf4 You have used 1 of 2 submissions
\i0 \cf3 \
\pard\pardeftab720\sl460\partightenfactor0

\fs38 \cf2 REVIEW QUESTION 3
\fs32 \cf3  \cf4 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf3 How does the resulting Numpy array 
\f1\fs28 \cb5 z
\f0\fs32 \cb1  look after you execute the following lines of code?
\f1\fs26 \cb5 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 import numpy as np\
x = np.array([1, 2, 3])\
y = np.array([3, 2, 1])\
z = x + y\
\pard\pardeftab720\sl400\partightenfactor0

\fs28 \cf3 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f0\fs32 \cf3 \cb1 \
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb5 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 array([4, 4, 4])
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  \
\pard\pardeftab720\sl384\partightenfactor0
\cf0 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 <code>array([4, 4, 4])</code> - correct\
\pard\pardeftab720\sl384\partightenfactor0
\cf2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb5 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 array([1, 2, 3, 3, 2, 1])
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
 
\f1\fs22 \cb5 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 array([2, 4, 6])
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
 
\f1\fs22 \cb5 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 array([13, 22, 31])
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf6 \shad0 EXPLANATION\
\pard\pardeftab720\sl448\partightenfactor0

\b0\fs32 \cf3 In Numpy, calculations are performed element-wise. The first element of 
\f1\fs28 \cb5 x
\f0\fs32 \cb1  and the first element of 
\f1\fs28 \cb5 y
\f0\fs32 \cb1 are added, giving 4. Similar for the second and third element of 
\f1\fs28 \cb5 x
\f0\fs32 \cb1  and 
\f1\fs28 \cb5 y
\f0\fs32 \cb1 .\
\pard\pardeftab720\sl300\partightenfactor0

\f2\b\fs26 \cf7 \cb8 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 FINAL CHECK\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf0 \cb1 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf3 \shad0  
\f2\b\fs26 \cf1 \cb10 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 SAVE\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf0 \cb1 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf3 \shad0  \
\pard\pardeftab720\sl300\qc\partightenfactor0

\f2\b\fs26 \cf0 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 TOGGLE ANSWER VISIBILITY\
\pard\pardeftab720\sl300\partightenfactor0
\cf7 \cb8 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 HIDE ANSWER
\f0\b0\fs32 \cf3 \cb1 \shad0  
\i \cf4 You have used 1 of 2 submissions
\i0 \cf3 \
\pard\pardeftab720\sl460\partightenfactor0

\fs38 \cf2 REVIEW QUESTION 4
\fs32 \cf3  \cf4 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf3 Numpy arrays can only hold elements with the same basic type. What happens if you try to put an integer, a boolean and a string in the same Numpy array using the 
\f1\fs28 \cb5 array()
\f0\fs32 \cb1  function?\
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  All array elements still have different types, you just don't see it.\
 All array elements are converted to booleans.\
 All array elements are converted to integers.\
 All array elements are converted to strings. \
\pard\pardeftab720\sl384\partightenfactor0
\cf0 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 All array elements are converted to strings. - correct\
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf6 \shad0 EXPLANATION\
\pard\pardeftab720\sl448\partightenfactor0

\b0\fs32 \cf3 The string is the most 'general' and free form to store data, so all other data types are converted to strings.\
\
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf12 Your First Numpy Array\
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf1 \cb13 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf12 \cb1 We're going to dive into the world of baseball. Along the way, you'll get comfortable with the basics of Numpy, a powerful package to do data science.\
A list 
\f1\fs22 \cb14 baseball
\f3\fs32 \cb1  has already been defined in the Python script, representing the height of some baseball players in centimeters. Can you add some code here and there to create a Numpy array from it?\
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf13 Instructions\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls1\ilvl0
\f3\b0\fs32 \cf12 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Import the 
\f1\fs22 \cb14 numpy
\f3\fs32 \cb1  package as 
\f1\fs22 \cb14 np
\f3\fs32 \cb1 , so that you can refer to
\f1\fs22 \cb14 numpy
\f3\fs32 \cb1  with 
\f1\fs22 \cb14 np
\f3\fs32 \cb1 .\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Use {\field{\*\fldinst{HYPERLINK "http://docs.scipy.org/doc/numpy-1.10.0/glossary.html#term-array"}}{\fldrslt 
\f1\fs22 \cf13 \cb14 np.array()}} to create a Numpy array from 
\f1\fs22 \cb14 baseball
\f3\fs32 \cb1 . Name this array 
\f1\fs22 \cb14 np_baseball
\f3\fs32 \cb1 .\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Print out the type of 
\f1\fs22 \cb14 np_baseball
\f3\fs32 \cb1  to check that you got it right.\
\pard\pardeftab720\sl448\partightenfactor0

\f0 \cf3 \
# Create list baseball \
baseball = [180, 215, 210, 210, 188, 176, 209, 200]\
\
# Import the numpy package as np\
import numpy as np\
\
# Create a Numpy array from baseball: np_baseball\
np_baseball = np.array(baseball)\
\
# Print out type of np_baseball\
print(type(np_baseball))\
\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf15 <script.py> output:\
    <class 'numpy.ndarray'>\cf7 \
\pard\pardeftab720\sl448\partightenfactor0

\f0\fs32 \cf3 \
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf12 Baseball players' height\
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf1 \cb13 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf12 \cb1 You are a huge baseball fan. You decide to call the MLB (Major League Baseball) and ask around for some more statistics on the height of the main players. They pass along data on more than a thousand players, which is stored as a regular Python list: 
\f1\fs22 \cb14 height
\f3\fs32 \cb1 . The height is expressed in inches. Can you make a Numpy array out of it and convert the units to centimeters?\
\pard\pardeftab720\sl200\sa200\partightenfactor0

\f1\fs22 \cf12 \cb14 height
\f3\fs32 \cb1  is already available and the 
\f1\fs22 \cb14 numpy
\f3\fs32 \cb1  package is loaded, so you can start straight away (Source: {\field{\*\fldinst{HYPERLINK "http://wiki.stat.ucla.edu/socr/index.php/SOCR_Data_MLB_HeightsWeights"}}{\fldrslt \cf13 stat.ucla.edu}}).\
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf13 Instructions\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls2\ilvl0
\f3\b0\fs32 \cf12 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Create a Numpy array from 
\f1\fs22 \cb14 height
\f3\fs32 \cb1 . Name this new array 
\f1\fs22 \cb14 np_height
\f3\fs32 \cb1 .\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Print 
\f1\fs22 \cb14 np_height
\f3\fs32 \cb1 .\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Multiply 
\f1\fs22 \cb14 np_height
\f3\fs32 \cb1  with 
\f1\fs22 \cb14 0.0254
\f3\fs32 \cb1  to convert all height measurements from inches to meters. Store the new values in a new array, 
\f1\fs22 \cb14 np_height_m
\f3\fs32 \cb1 .\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Print out 
\f1\fs22 \cb14 np_height_m
\f3\fs32 \cb1  and check if the output makes sense.\
\pard\tx720\pardeftab720\sl480\partightenfactor0
\cf13 \
# height is available as a regular list\
\
# Import numpy\
import numpy as np\
\
# Create a Numpy array from height: np_height\
np_height = np.array(height)\
\
# Print out np_height\
print(np_height)\
\
# Convert np_height to m: np_height_m\
np_height_m = np_height*0.0254\
\
# Print np_height_m\
print(np_height_m)\
\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf15 <script.py> output:\
    [74 74 72 ..., 75 75 73]\
    [ 1.8796  1.8796  1.8288 ...,  1.905   1.905   1.8542]\
\
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf12 Baseball player's BMI\
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf1 \cb13 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf12 \cb1 The MLB also offers to let you analyze their weight data. Again, both are available as regular Python lists: 
\f1\fs22 \cb14 height
\f3\fs32 \cb1  and 
\f1\fs22 \cb14 weight
\f3\fs32 \cb1 . 
\f1\fs22 \cb14 height
\f3\fs32 \cb1 is in inches and 
\f1\fs22 \cb14 weight
\f3\fs32 \cb1  is in pounds.\
It's now possible to calculate the BMI of each baseball player. Python code to convert 
\f1\fs22 \cb14 height
\f3\fs32 \cb1  to a Numpy array with the correct units is already available in the workspace. Follow the instructions step by step and finish the game!\
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf13 Instructions\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls3\ilvl0
\f3\b0\fs32 \cf12 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Create a Numpy array from the 
\f1\fs22 \cb14 weight
\f3\fs32 \cb1  list with the correct units. Multiply by 
\f1\fs22 \cb14 0.453592
\f3\fs32 \cb1  to go from pounds to kilograms. Store the resulting Numpy array as 
\f1\fs22 \cb14 np_weight_kg
\f3\fs32 \cb1 .\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Use 
\f1\fs22 \cb14 np_height_m
\f3\fs32 \cb1  and 
\f1\fs22 \cb14 np_weight_kg
\f3\fs32 \cb1  to calculate the BMI of each player. Use the following equation:
\f4\fs34 BMI=weight(kg)
\f2 \uc0\u8232 
\f4 height(m)
\f2 \uc0\u8232 
\f4\fs24 2
\f2\fs34 \uc0\u8232 \u8232 \u8232 \u8232 
\f4\fs32 BMI=weight(kg)height(m)
\fs24 2\uc0\u8232 
\f3\fs32 \uc0\u8232 Save the resulting numpy array as 
\f1\fs22 \cb14 bmi
\f3\fs32 \cb1 .\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Print out 
\f1\fs22 \cb14 bmi
\f3\fs32 \cb1 .\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf7 \
\
# height and weight are available as a regular lists\
\
# Import numpy\
import numpy as np\
\
# Create array from height with correct units: np_height_m\
np_height_m = np.array(height) * 0.0254\
\
# Create array from weight with correct units: np_weight_kg \
np_weight_kg = np.array(weight)*0.453592\
\
# Calculate the BMI: bmi\
bmi = np_weight_kg/((np_height_m)**2)\
\
# Print out bmi\
print(bmi)\
\
\cf15 <script.py> output:\
    [ 23.11037639  27.60406069  28.48080465 ...,  25.62295933  23.74810865\
      25.72686361]\cf7 \
\
\
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf12 Lightweight baseball players\
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf1 \cb13 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf12 \cb1 To subset both regular Python lists and Numpy arrays, you can use square brackets:\
\pard\pardeftab720\sl200\partightenfactor0

\f1\fs22 \cf7 \cb14 x = [4 , 9 , 6, 3, 1]\
x[1]\
import numpy as np\
y = np.array(x)\
y[1]\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f3\fs32 \cf12 \cb1 For Numpy specifically, you can also use boolean Numpy arrays:\
\pard\pardeftab720\sl200\partightenfactor0

\f1\fs22 \cf7 \cb14 high = y > 5\
y[high]\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f3\fs32 \cf12 \cb1 The code that calculates the BMI of all baseball players is already included. Follow the instructions and reveal interesting things from the data!\
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf13 Instructions\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls4\ilvl0
\f3\b0\fs32 \cf12 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Create a boolean Numpy array: the element of the array should be 
\f1\fs22 \cb14 True
\f3\fs32 \cb1  if the corresponding baseball player's BMI is below 21. You can use the 
\f1\fs22 \cb14 <
\f3\fs32 \cb1  operator for this. Name the array 
\f1\fs22 \cb14 light
\f3\fs32 \cb1 .\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Print the array 
\f1\fs22 \cb14 light
\f3\fs32 \cb1 .\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Print out a Numpy array with the BMIs of all baseball players whose BMI is below 21. Use 
\f1\fs22 \cb14 light
\f3\fs32 \cb1  inside square brackets to do a selection on the 
\f1\fs22 \cb14 bmi
\f3\fs32 \cb1  array.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\
\pard\tx720\pardeftab720\sl480\partightenfactor0
\cf12 # height and weight are available as a regular lists\
\
# Import numpy\
import numpy as np\
\
# Calculate the BMI: bmi\
np_height_m = np.array(height) * 0.0254\
np_weight_kg = np.array(weight) * 0.453592\
bmi = np_weight_kg / np_height_m ** 2\
\
# Create the light array\
light = bmi < 21\
\
# Print out light\
print(light)\
\
# Print out BMIs of all baseball players whose BMI is below 21\
print(bmi[light])\
\
\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf15 <script.py> output:\
    [False False False ..., False False False]\
    [ 20.54255679  20.54255679  20.69282047  20.69282047  20.34343189\
      20.34343189  20.69282047  20.15883472  19.4984471   20.69282047\
      20.9205219 ]\
\
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf12 Numpy Side Effects\
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf1 \cb13 50xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf12 \cb1 As Filip explained before, Numpy is great to do vector arithmetic. If you compare its functionality with regular Python lists, however, some things have changed.\
First of all, Numpy arrays cannot contain elements with different types. If you try to build such a list, some of the elments' types are changed to end up with a homogenous list. This is known as 
\i type coercion
\i0 .\
Second, the typical arithmetic operators, such as 
\f1\fs22 \cb14 +
\f3\fs32 \cb1 , 
\f1\fs22 \cb14 -
\f3\fs32 \cb1 , 
\f1\fs22 \cb14 *
\f3\fs32 \cb1  and 
\f1\fs22 \cb14 /
\f3\fs32 \cb1  have a different meaning for regular Python lists and Numpy arrays.\
Have a look at this line of code:\
\pard\pardeftab720\sl200\partightenfactor0

\f1\fs22 \cf7 \cb14 np.array([True, 1, 2]) + np.array([3, 4, False])\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f3\fs32 \cf12 \cb1 Can you tell which code chunk builds the exact same Python data structure? The Numpy package is already imported as 
\f1\fs22 \cb14 np
\f3\fs32 \cb1 , so you can start experimenting in the IPython Shell straight away!\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf15 \
\pard\pardeftab720\sl288\partightenfactor0

\fs28 \cf12 \cb14 np.array([4, 3, 0]) + np.array([0, 2, 2])\
\

\fs22 \cf15 \cb1 \
\pard\pardeftab720\sl345\partightenfactor0

\f0\fs28 \cf2 REVIEW QUESTION 1
\f5\fs24 \cf0  \cf4 (1/1 point)\
\pard\pardeftab720\sl300\sa339\partightenfactor0

\f0 \cf0 What charaterizes multi-dimensional Numpy arrays?\
\pard\pardeftab720\sl384\partightenfactor0
\cf2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  The highest number of dimensions in a Numpy array is 3; it's not possible to create a 4D Numpy array.\
 You can only create a 2D Numpy array from a set of 1D Numpy arrays.\
 2D Numpy arrays can hold different data types.\
 You can create a 2D Numpy array from a regular list of lists. \
\pard\pardeftab720\sl384\partightenfactor0
\cf0 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 You can create a 2D Numpy array from a regular list of lists. - correct\
\pard\pardeftab720\sl260\sa305\partightenfactor0

\b\fs22 \cf6 \shad0 EXPLANATION\
\pard\pardeftab720\sl300\partightenfactor0

\b0\fs24 \cf0 Multi-dimensional Numpy arrays are natural extensions of the 1D Numpy array: They can only hold a single type and can be created from a regular Python list structure. The number N in these N-dimensional Numpy arrays is not limited.\
\pard\pardeftab720\sl240\partightenfactor0

\f2\b\fs20 \cf7 \cb8 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 FINAL CHECK\
\pard\pardeftab720\sl240\qc\partightenfactor0
\cf0 \cb1 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 YOUR ANSWER\
\pard\pardeftab720\sl280\partightenfactor0

\f5\b0\fs24 \cf0 \shad0  
\f2\b\fs20 \cf1 \cb10 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 SAVE\
\pard\pardeftab720\sl240\qc\partightenfactor0
\cf0 \cb1 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 YOUR ANSWER\
\pard\pardeftab720\sl280\partightenfactor0

\f5\b0\fs24 \cf0 \shad0  \
\pard\pardeftab720\sl240\qc\partightenfactor0

\f2\b\fs20 \cf0 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 TOGGLE ANSWER VISIBILITY\
\pard\pardeftab720\sl240\partightenfactor0
\cf7 \cb8 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 HIDE ANSWER
\f5\b0\fs24 \cf0 \cb1 \shad0  
\i \cf4 You have used 1 of 2 submissions
\i0 \cf0 \
\pard\pardeftab720\sl345\partightenfactor0

\f0\fs28 \cf2 REVIEW QUESTION 2
\f5\fs24 \cf0  \cf4 (1/1 point)\
\pard\pardeftab720\sl300\sa339\partightenfactor0

\f0 \cf0 Apart from element-wise calculations, 2D Numpy arrays also offer more advanced ways of subsetting compared to regular Python lists of lists. Have a look at the following 2D Numpy array, 
\f1\fs22 \cb5 x
\fs20 \
\pard\pardeftab720\sl260\partightenfactor0
\cf0 import numpy as np\
x = np.array([["a", "b", "c", "d"],\
              ["e", "f", "g", "h"]])\
\pard\pardeftab720\sl300\partightenfactor0

\fs22 \cf0 \
\pard\pardeftab720\sl300\sa339\partightenfactor0

\f0\fs24 \cf0 \cb1 \
What's the correct Python command to select the string 
\f1\fs22 \cb5 "g"
\f0\fs24 \cb1  from 
\f1\fs22 \cb5 x
\f0\fs24 \cb1 ?\
\pard\pardeftab720\sl384\partightenfactor0
\cf2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb5 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 x[-1,1]
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
 
\f1\fs22 \cb5 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 x[0][1]
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
 
\f1\fs22 \cb5 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 x[1,2]
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  \
\pard\pardeftab720\sl384\partightenfactor0
\cf0 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 <code>x[1,2]</code> - correct\
\pard\pardeftab720\sl384\partightenfactor0
\cf2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb5 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 x[0,2]
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\pard\pardeftab720\sl260\sa305\partightenfactor0

\b\fs22 \cf6 \shad0 EXPLANATION\
\pard\pardeftab720\sl300\partightenfactor0

\b0\fs24 \cf0 To select the second row, use the index 
\f1\fs22 \cb5 1
\f0\fs24 \cb1  before the comma. To select the third column, use the index
\f1\fs22 \cb5 2
\f0\fs24 \cb1  after the comma.\
\pard\pardeftab720\sl240\partightenfactor0

\f2\b\fs20 \cf7 \cb8 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 FINAL CHECK\
\pard\pardeftab720\sl240\qc\partightenfactor0
\cf0 \cb1 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 YOUR ANSWER\
\pard\pardeftab720\sl280\partightenfactor0

\f5\b0\fs24 \cf0 \shad0  
\f2\b\fs20 \cf1 \cb10 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 SAVE\
\pard\pardeftab720\sl240\qc\partightenfactor0
\cf0 \cb1 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 YOUR ANSWER\
\pard\pardeftab720\sl280\partightenfactor0

\f5\b0\fs24 \cf0 \shad0  \
\pard\pardeftab720\sl240\qc\partightenfactor0

\f2\b\fs20 \cf0 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 TOGGLE ANSWER VISIBILITY\
\pard\pardeftab720\sl240\partightenfactor0
\cf7 \cb8 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 HIDE ANSWER
\f5\b0\fs24 \cf0 \cb1 \shad0  
\i \cf4 You have used 1 of 2 submissions
\i0 \cf0 \
\pard\pardeftab720\sl345\partightenfactor0

\f0\fs28 \cf2 REVIEW QUESTION 3
\f5\fs24 \cf0  \cf4 (1/1 point)\
\pard\pardeftab720\sl300\sa339\partightenfactor0

\f0 \cf0 Multiple choice problems allow learners to select only one option. Learners can see all the options along with the problem text.\
In the video, Filip mentioned that 2D Numpy arrays also allow element-wise calculations. You'll get plenty of practice with this in the exercises. For starters, can you tell what the resulting array 
\f1\fs22 \cb5 z
\f0\fs24 \cb1  will contain after executing the following lines of Python code?
\f1\fs20 \cb5 \
\pard\pardeftab720\sl260\partightenfactor0
\cf0 import numpy as np\
x = np.array([[1, 2, 3],\
              [1, 2, 3]])\
y = np.array([[1, 1, 1],\
              [1, 2, 3]])\
z = x - y\
\pard\pardeftab720\sl300\partightenfactor0

\fs22 \cf0 \
\pard\pardeftab720\sl260\partightenfactor0

\fs20 \cf2 \cb5 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
array([[1, 2, 3],\
       [1, 2, 3],\
       [1, 1, 1],\
       [1, 2, 3]])\
      \
array([[0, 1, 2],\
       [0, 0, 0]])\
       
\fs22 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\pard\pardeftab720\sl384\partightenfactor0

\f0\fs24 \cf0 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 <pre><code> array([[0, 1, 2], [0, 0, 0]]) </code></pre> - correct
\f1\fs20 \cf2 \cb5 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\pard\pardeftab720\sl260\partightenfactor0
\cf2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 array([[0, 0, 0],\
       [0, 1, 2]])\
       
\fs22 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\pard\pardeftab720\sl384\partightenfactor0

\f0\fs24 \cf2 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  A 2-by-3 Numpy array with only zeros.\
\pard\pardeftab720\sl288\partightenfactor0

\f1\fs22 \cf15 \shad0 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f3\fs32 \cf12 Before working on the actual MLB data, let's try to create a 2D Numpy array from a small list of lists.\
In this exercise, 
\f1\fs22 \cb14 baseball
\f3\fs32 \cb1  is a list of lists. The main list contains 4 elements. Each of these elements is a list containing the height and the weight of 4 baseball players, in this order. 
\f1\fs22 \cb14 baseball
\f3\fs32 \cb1  is already coded for you in the script.\
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf13 Instructions\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls5\ilvl0
\f3\b0\fs32 \cf12 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Use {\field{\*\fldinst{HYPERLINK "http://docs.scipy.org/doc/numpy-1.10.0/glossary.html#term-array"}}{\fldrslt 
\f1\fs22 \cf13 \cb14 np.array()}} to create a 2D Numpy array from 
\f1\fs22 \cb14 baseball
\f3\fs32 \cb1 . Name it 
\f1\fs22 \cb14 np_baseball
\f3\fs32 \cb1 .\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls5\ilvl0\cf12 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Print out the type of 
\f1\fs22 \cb14 np_baseball
\f3\fs32 \cb1 .\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Print out the 
\f1\fs22 \cb14 shape
\f3\fs32 \cb1  attribute of 
\f1\fs22 \cb14 np_baseball
\f3\fs32 \cb1 . Use 
\f1\fs22 \cb14 np_baseball.shape
\f3\fs32 \cb1 .\
\pard\pardeftab720\sl288\partightenfactor0

\f1\fs22 \cf15 \
# Create baseball, a list of lists\
baseball = [[180, 78.4],\
            [215, 102.7],\
            [210, 98.5],\
            [188, 75.2]]\
\
# Import numpy\
import numpy as np\
\
# Create a 2D Numpy array from baseball: np_baseball\
np_baseball = np.array(baseball)\
\
# Print out the type of np_baseball\
print(type(np_baseball))\
\
# Print out the shape of np_baseball\
print(np_baseball.shape)\
\
\pard\pardeftab720\sl300\partightenfactor0
\cf15 <script.py> output:\
    <class 'numpy.ndarray'>\
    (4, 2)\
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf12 Baseball data in 2D form\
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf1 \cb13 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf12 \cb1 You have another look at the MLB data and realize that it makes more sense to restructure all this information in a 2D Numpy array. This array should have 1015 rows, corresponding to the 1015 baseball players you have information on, and 2 columns (for height and weight).\
The MLB was, again, very helpful and passed you the data in a different structure, a Python list of lists. In this list of lists, each sublist represents the height and weight of a single baseball player. The name of this embedded list is 
\f1\fs22 \cb14 baseball
\f3\fs32 \cb1 .\
Can you store the data as a 2D array to unlock Numpy's extra functionality?\
\pard\pardeftab720\sl480\partightenfactor0

\f2\b \cf13 \
\pard\pardeftab720\sl288\partightenfactor0

\f1\b0\fs22 \cf15  baseball is available as a regular list of lists\
\
# Import numpy package\
import numpy as np\
\
# Create a 2D Numpy array from baseball: np_baseball\
np_baseball = np.array(baseball)\
\
# Print out the shape of np_baseball\
print(np_baseball.shape)\
\
\pard\pardeftab720\sl300\partightenfactor0
\cf15 <script.py> output:\
    (1015, 2)\
\pard\pardeftab720\sl288\partightenfactor0
\cf15 \
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf12 Subsetting Numpy Arrays\
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf1 \cb13 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf12 \cb1 You've seen it with your own eyes: Python lists and Numpy arrays sometimes behave differently. Luckily, there are still certainties in this world. For example, subsetting (using the square bracket notation on lists or arrays) works exactly the same. To see this for yourself, try the following lines of code in the IPython Shell:\
\pard\pardeftab720\sl200\partightenfactor0

\f1\fs22 \cf7 \cb14 x = ["a", "b", "c"]\
x[1]\
\
np_x = np.array(x)\
np_x[1]\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f3\fs32 \cf12 \cb1 The script on the right already contains code that imports 
\f1\fs22 \cb14 numpy
\f3\fs32 \cb1  as 
\f1\fs22 \cb14 np
\f3\fs32 \cb1 , and stores both the height and weight of the MLB players as Numpy arrays.\
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf13 Instructions\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls6\ilvl0
\f3\b0\fs32 \cf12 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Subset 
\f1\fs22 \cb14 np_weight
\f3\fs32 \cb1 : print out the element at index 50.\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Print out a sub-array of 
\f1\fs22 \cb14 np_height
\f3\fs32 \cb1 : It contains the elements at index 100 up to 
\f2\b and including
\f3\b0  index 110\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}# height and weight are available as a regular lists\
{\listtext	\'95	}\
{\listtext	\'95	}# Import numpy\
{\listtext	\'95	}import numpy as np\
{\listtext	\'95	}\
{\listtext	\'95	}# Store weight and height lists as numpy arrays\
{\listtext	\'95	}np_weight = np.array(weight)\
{\listtext	\'95	}np_height = np.array(height)\
{\listtext	\'95	}\
{\listtext	\'95	}# Print out the weight at index 50\
{\listtext	\'95	}print(np_weight[50])\
{\listtext	\'95	}\
{\listtext	\'95	}# Print out sub-array of np_height: index 100 up to and including index 110\
{\listtext	\'95	}print(np_height[100:111])\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls6\ilvl0
\f1\fs22 \cf15 {\listtext	\'95	}\expnd0\expndtw0\kerning0
<script.py> output:\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
200\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
[73 74 72 73 69 72 73 75 75 73 72]\cf7 \
\pard\tx720\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf12 \
\pard\pardeftab720\sl460\partightenfactor0

\f0\fs38 \cf2 REVIEW QUESTION 1
\fs32 \cf3  \cf4 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf3 Have a look at the following statements about Basic Statistics with Numpy and select the correct one. To read these statements correctly, assume that the Numpy package is imported as 
\f1\fs28 \cb5 np
\f0\fs32 \cb1 .\
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  Using \
\pard\pardeftab720\sl600\partightenfactor0

\f4\i\fs40 \cf2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 np
\i0 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 .
\i \shad\shadx0\shady-20\shadr0\shado102 \shadc0 mean
\i0 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 ()
\f0 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  to calculate the mean of your values is enough to get a first idea about your data; \
\pard\pardeftab720\sl600\partightenfactor0

\f4\i\fs40 \cf2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 np
\i0 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 .
\i \shad\shadx0\shady-20\shadr0\shado102 \shadc0 median
\i0 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 ()
\f0 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  is not relevant at this point.\
 Numpy offers many functions to calculate basic statistics, such as 
\f1\fs22 \cb5 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 np.mean()
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 , 
\f1\fs22 \cb5 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 np.median()
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  and
\f1\fs22 \cb5 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 np.std()
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 . \
\pard\pardeftab720\sl384\partightenfactor0
\cf0 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 Numpy offers many functions to calculate basic statistics, such as <code>np.mean()</code>, <code>np.median()</code> and <code>np.std()</code>. - correct\
\pard\pardeftab720\sl384\partightenfactor0
\cf2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb5 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 np.column_stack()
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  takes a number of 1D arrays and appends them to one another to create one giant 1D array.\
 
\f1\fs22 \cb5 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 np.median()
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  returns an array with 5 elements: the minimum, maximum and first, second and third quartiles the array you passed it.\
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf6 \shad0 EXPLANATION\
\pard\pardeftab720\sl448\partightenfactor0

\b0\fs32 \cf3 Both the mean and median are interesting statistics to check out before you start your analysis. Visual inspection of your data is practically infeasible if you're dealing with millions of data points.\
\pard\pardeftab720\sl300\partightenfactor0

\f2\b\fs26 \cf7 \cb8 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 FINAL CHECK\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf0 \cb1 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf3 \shad0  
\f2\b\fs26 \cf1 \cb10 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 SAVE\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf0 \cb1 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf3 \shad0  \
\pard\pardeftab720\sl300\qc\partightenfactor0

\f2\b\fs26 \cf0 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 TOGGLE ANSWER VISIBILITY\
\pard\pardeftab720\sl300\partightenfactor0
\cf7 \cb8 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 HIDE ANSWER
\f0\b0\fs32 \cf3 \cb1 \shad0  
\i \cf4 You have used 1 of 2 submissions
\i0 \cf3 \
\pard\pardeftab720\sl460\partightenfactor0

\fs38 \cf2 REVIEW QUESTION 2
\fs32 \cf3  \cf4 (1 point possible)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf3 Suppose you're measuring your travel time to work each day, together with the weather. The data could look something like this:
\f1\fs26 \cb5 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 import numpy as np\
x = np.array([[28, 18],\
              [34, 14],\
              [32, 16],\
              ...\
              [26, 23],\
              [23, 17]])\
\pard\pardeftab720\sl400\partightenfactor0

\fs28 \cf3 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f0\fs32 \cf3 \cb1 \
Here, each row specifies the measurements for a single day. The first column specifies the temperature in Fahrenheit, the second column specifies the amount of minutes it took to get to your job.\
Which Python command do you need to calculate the average travel time over all these observations?\
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb5 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 np.mean(x[:,0])
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
 
\f1\fs22 \cb5 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 np.mean(x[0,:])
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
 
\f1\fs22 \cb5 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 np.mean(x[1,:])\
\pard\pardeftab720\sl384\partightenfactor0

\f0\fs24 \cf0 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 <code>np.mean(x[1,:])</code> - incorrect\
\pard\pardeftab720\sl384\partightenfactor0
\cf2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb5 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 np.mean(x[:,1])
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  \
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf6 \shad0 EXPLANATION\
\pard\pardeftab720\sl448\partightenfactor0

\f1\b0 \cf3 \cb5 :,1
\f0\fs32 \cb1  inside square brackets tells Python to get all the rows, and the second column. You can then use
\f1\fs28 \cb5 np.mean()
\f0\fs32 \cb1  to get the average of the resulting Numpy array.\
\pard\pardeftab720\sl300\qc\partightenfactor0

\f2\b\fs26 \cf0 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 TOGGLE ANSWER VISIBILITY\
\pard\pardeftab720\sl300\partightenfactor0
\cf7 \cb8 \shad\shadx0\shady-20\shadr0\shado255 \shadc9 HIDE ANSWER
\f0\b0\fs32 \cf3 \cb1 \shad0  
\i \cf4 You have used 2 of 2 submissions
\i0 \cf3 \
\pard\pardeftab720\sl380\partightenfactor0
{\field{\*\fldinst{HYPERLINK "javascript:void(0)"}}{\fldrslt 
\fs28 \cf10 Show Discussion\
}}\pard\pardeftab720\sl320\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://courses.edx.org/courses/course-v1:Microsoft+DAT208x+1T2016/courseware/0f10a306d95945e886626db797e4b2f5/0a730918ce33429682418b7bddd3c80b/#"}}{\fldrslt 
\f5 \cf1 \
\pard\pardeftab720\sl320\partightenfactor0

\f0\fs26 \cf1 \cb16 New Post}}
\fs26 \cf1 \cb16 \
\pard\pardeftab720\sl460\partightenfactor0

\fs38 \cf2 \cb1 REVIEW QUESTION 3
\fs32 \cf3  \cf4 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf3 As a wrap up, have a look at the statements below about Numpy in general. Select the three statements that hold.\
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  Numpy is a great alternative to the regular Python list if you want to do Data Science in Python. \
 Numpy arrays can only hold elements of the same basic type. \
 It is not possible perform element-wise calculations with 3D Numpy arrays.\
 Next to an efficient data structure, Numpy also offers tools to calculate summary statistics and to simulate statistical distributions. \
\pard\pardeftab720\sl448\partightenfactor0

\fs32 \cf0 \shad0 Numpy is a great alternative to the regular Python list if you want to do Data Science in Python., Numpy arrays can only hold elements of the same basic type., Next to an efficient data structure, Numpy also offers tools to calculate summary statistics and to simulate statistical distributions., - correct\
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf6 EXPLANATION\
\pard\pardeftab720\sl448\partightenfactor0

\b0\fs32 \cf3 No matter the dimension of the Numpy array, element-wise calculations will always be possible.\
\
\
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf12 Average versus median\
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf1 \cb13 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf12 \cb1 You now know how to use Numpy functions to a get a better feeling for your data. It basically comes down to importing Numpy and then calling several simple functions on the Numpy arrays:\
\pard\pardeftab720\sl200\partightenfactor0

\f1\fs22 \cf7 \cb14 import numpy as np\
x = [1, 4, 8, 10, 12]\
np.mean(x)\
np.median(x)\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f3\fs32 \cf12 \cb1 The baseball data is available as a 2D Numpy array with 3 columns (height, weight, age) and 1015 rows. The name of this Numpy array is 
\f1\fs22 \cb14 np_baseball
\f3\fs32 \cb1 . After restructuring the data, however, you notice that some height values are abnormally high. Follow the instructions and discover which summary statistic is best suited if you're dealing with so-called 
\i outliers
\i0 .\
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf13 Instructions\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls7\ilvl0
\f3\b0\fs32 \cf12 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Create Numpy array 
\f1\fs22 \cb14 np_height
\f3\fs32 \cb1 , that is equal to first column of 
\f1\fs22 \cb14 np_baseball
\f3\fs32 \cb1 .\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Print out the mean of 
\f1\fs22 \cb14 np_height
\f3\fs32 \cb1 .\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Print out the median of 
\f1\fs22 \cb14 np_height
\f3\fs32 \cb1 .\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls8\ilvl0\cf13 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl448\partightenfactor0

\f0 \cf3 # np_baseball is available\
\
# Import numpy\
import numpy as np\
\
# Create np_height from np_baseball\
np_height = np_baseball[:,0]\
np_weight = np_baseball[:,1]\
\
# Print out the mean of np_height\
print(np.mean(np_height))\
\
# Print out the median of np_height\
print(np.median(np_height))\
\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf15 <script.py> output:\
    1586.46108374\
    74.\cf7 \
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf12 Explore the baseball data\
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf1 \cb13 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf12 \cb1 Because the mean and median are so far apart, you decide to complain to the MLB. They find the error and send the corrected data over to you. It's again available as a 2D Numpy array 
\f1\fs22 \cb14 np_baseball
\f3\fs32 \cb1 , with three columns.\
The Python script on the right already includes code to print out informative messages with the different summary statistics. Can you finish the job?\
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf13 Instructions\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls9\ilvl0
\f3\b0\fs32 \cf12 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
The code to print out the mean height is already included. Complete the code for the median height. Replace 
\f1\fs22 \cb14 None
\f3\fs32 \cb1 with the correct code.\
\ls9\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Use {\field{\*\fldinst{HYPERLINK "http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.median.html"}}{\fldrslt 
\f1\fs22 \cf13 \cb14 np.std()}} on the first column of 
\f1\fs22 \cb14 np_baseball
\f3\fs32 \cb1 to calculate 
\f1\fs22 \cb14 stddev
\f3\fs32 \cb1 . Replace 
\f1\fs22 \cb14 None
\f3\fs32 \cb1  with the correct code.\
\ls9\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Do big players tend to be heavier? Use {\field{\*\fldinst{HYPERLINK "http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.corrcoef.html"}}{\fldrslt 
\f1\fs22 \cf13 \cb14 np.corrcoef()}}to store the correlation between the first and second column of 
\f1\fs22 \cb14 np_baseball
\f3\fs32 \cb1  in 
\f1\fs22 \cb14 corr
\f3\fs32 \cb1 . Replace 
\f1\fs22 \cb14 None
\f3\fs32 \cb1  with the correct code.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\partightenfactor0
\ls10\ilvl0
\f5\b\fs36 \cf1 \kerning1\expnd0\expndtw0 		{\field{\*\fldinst{HYPERLINK "https://campus.datacamp.com/"}}{\fldrslt \expnd0\expndtw0\kerning0
\uc0\u8232 }}
\f2\b0\fs22 \cb17 \expnd0\expndtw0\kerning0
\uc0\u8232 
\f3\fs32 \cf13 \cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\f0 \cf3 \
# np_baseball is available\
\
# Import numpy\
import numpy as np\
\
# Print mean height (first column)\
avg = np.mean(np_baseball[:,0])\
print("Average: " + str(avg))\
\
# Print median height. Replace 'None'\
med = np.median(np_baseball[:,0])\
print("Median: " + str(med))\
\
# Print out the standard deviation on height. Replace 'None'\
stddev = np.std(np_baseball[:,0])\
print("Standard Deviation: " + str(stddev))\
\
# Print out correlation between first and second column. Replace 'None'\
corr = np.corrcoef(np_baseball[:,0],np_baseball[:,1])\
print("Correlation: " + str(corr))\
\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf15 <script.py> output:\
    Average: 73.6896551724\
    Median: 74.0\
    Standard Deviation: 2.31279188105\
    Correlation: [[ 1.          0.53153932]\
     [ 0.53153932  1.        ]]\cf7 \
\
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf12 Blend it all together\
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf1 \cb13 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf12 \cb1 In the last few exercises you've learned everything there is to know about heights and weights of baseball players. Now it's time to dive into another sport: soccer.\
You've contacted the FIFA for some data and they handed you two lists. The lists are the following:\
\pard\pardeftab720\sl200\partightenfactor0

\f1\fs22 \cf7 \cb14 positions = ['GK', 'M', 'A', 'D', ...]\
heights = [191, 184, 185, 180, ...]\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f3\fs32 \cf12 \cb1 Each element in the lists corresponds to a player. The first list, 
\f1\fs22 \cb14 positions
\f3\fs32 \cb1 , contains strings representing each player's position. The possible positions are: 
\f1\fs22 \cb14 'GK'
\f3\fs32 \cb1  (goalkeeper), 
\f1\fs22 \cb14 'M'
\f3\fs32 \cb1  (midfield), 
\f1\fs22 \cb14 'A'
\f3\fs32 \cb1  (attack) and 
\f1\fs22 \cb14 'D'
\f3\fs32 \cb1  (defense). The second list, 
\f1\fs22 \cb14 heights
\f3\fs32 \cb1 , contains integers representing the height of the player in cm. The first player in the lists is a goalkeeper and is pretty tall (191 cm).\
You're fairly confident that the median height of goalkeepers is higher than that of other players on the soccer field. Some of your friends don't believe you, so you are determined to show them using the data you received from FIFA and your newly acquired Python skills.\
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf13 Instructions\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls11\ilvl0
\f3\b0\fs32 \cf12 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Convert 
\f1\fs22 \cb14 heights
\f3\fs32 \cb1  and 
\f1\fs22 \cb14 positions
\f3\fs32 \cb1 , which are regular lists, to numpy arrays. Call them 
\f1\fs22 \cb14 np_heights
\f3\fs32 \cb1  and 
\f1\fs22 \cb14 np_positions
\f3\fs32 \cb1 .\
\ls11\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Extract all the heights of the goalkeepers. You can use a little trick here: use 
\f1\fs22 \cb14 np_positions == 'GK'
\f3\fs32 \cb1  as an index for 
\f1\fs22 \cb14 np_heights
\f3\fs32 \cb1 . Assign the result to 
\f1\fs22 \cb14 gk_heights
\f3\fs32 \cb1 .\
\ls11\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Extract all the heights of the all the other players. This time use 
\f1\fs22 \cb14 np_positions != 'GK'
\f3\fs32 \cb1  as an index for 
\f1\fs22 \cb14 np_heights
\f3\fs32 \cb1 . Assign the result to 
\f1\fs22 \cb14 other_heights
\f3\fs32 \cb1 .\
\ls11\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Print out the median height of the goalkeepers using {\field{\*\fldinst{HYPERLINK "http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.median.html"}}{\fldrslt 
\f1\fs22 \cf13 \cb14 np.median()}}. Replace 
\f1\fs22 \cb14 None
\f3\fs32 \cb1  with the correct code.\
\ls11\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Do the same for the other players. Print out their median height. Replace 
\f1\fs22 \cb14 None
\f3\fs32 \cb1  with the correct code.\
\pard\tx720\pardeftab720\sl480\partightenfactor0
\cf13 \
# heights and positions are available as lists\
\
# Import numpy\
import numpy as np\
\
# Convert positions and heights to numpy arrays: np_positions, np_heights\
np_positions = np.array(positions)\
np_heights = np.array(heights)\
\
# Heights of the goalkeepers: gk_heights\
gk_heights = np_heights[np_positions == 'GK']\
\
# Heights of the other players: other_heights\
other_heights = np_heights[np_positions != 'GK']\
\
# Print out the median height of goalkeepers. Replace 'None'\
print("Median height of goalkeepers: " + str(np.median(gk_heights)))\
\
# Print out the median height of other players. Replace 'None'\
print("Median height of other players: " + str(np.median(other_heights)))\
\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf15 <script.py> output:\
    Median height of goalkeepers: 188.0\
    Median height of other players: 181.0\cf7 \
\pard\tx720\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf13 \
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf18 \cb19 \outl0\strokewidth0 \strokec18 Subsetting 2D Numpy Arrays\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf19 \cb20 \strokec19 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf18 \cb19 \strokec18 If your 2D Numpy array has a regular structure, i.e. each row and column has a fixed number of values, complicated ways of subsetting become very easy. Have a look at the code below where the elements 
\f1\fs22 \cb21 "a"
\f3\fs32 \cb19  and
\f1\fs22 \cb21 "c"
\f3\fs32 \cb19  are extracted from a list of lists.\cb1 \
\pard\pardeftab720\sl200\partightenfactor0

\f1\fs22 \cf22 \cb21 \strokec22 # regular list of lists\
x = [["a", "b"], ["c", "d"]]\
[x[0][0], x[1][0]]\
\
# numpy\
import numpy as np\
np_x = np.array(x)\
np_x[:,0]\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f3\fs32 \cf18 \cb19 \strokec18 For regular Python lists, this is a real pain. For 2D Numpy arrays, however, it's pretty intuitive! The indexes before the comma refer to the rows, while those after the comma refer to the columns. The 
\f1\fs22 \cb21 :
\f3\fs32 \cb19  is for slicing; in this example, it tells Python to include all rows.\cb1 \
\cb19 The code that converts the pre-loaded 
\f1\fs22 \cb21 baseball
\f3\fs32 \cb19  list to a 2D Numpy array is already in the script. Add some lines to make the correct selections. Remember that in Python, the first element is at index 0!\cb1 \
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf20 \cb19 \strokec20 Instructions\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls12\ilvl0
\f3\b0\fs32 \cf18 \cb19 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec18 Print out the 50th row of 
\f1\fs22 \cb21 np_baseball
\f3\fs32 \cb19 .\cb1 \
\ls12\ilvl0\cb19 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec18 Make a new variable, 
\f1\fs22 \cb21 np_weight
\f3\fs32 \cb19 , containing the entire second column of 
\f1\fs22 \cb21 np_baseball
\f3\fs32 \cb19 .\cb1 \
\ls12\ilvl0\cb19 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec18 Select the height (first column) of the 124th baseball player in 
\f1\fs22 \cb21 np_baseball
\f3\fs32 \cb19  and print it out.\cb1 \
\ls12\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec18 \
\pard\tx720\pardeftab720\sl480\partightenfactor0
\cf18  baseball is available as a regular list of lists\
\
# Import numpy package\
import numpy as np\
\
# Create np_baseball (2 cols)\
np_baseball = np.array(baseball)\
\
# Print out the 50th row of np_baseball\
print(np_baseball[49, :])\
\
# Select the entire second column of np_baseball: np_weight\
np_weight = np_baseball[:, 1]\
\
# Print out height of 124th player\
print(np_baseball[123, 0])\
\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf23 \cb19 \strokec23 <script.py> output:\
    [ 70 195]\
    [ 75 200]\
\
<script.py> output:\
    [ 70 195]\
    75\
\pard\tx720\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf18 \cb1 \strokec18 \
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf18 \cb19 2D Arithmetic\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf19 \cb20 \strokec19 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf18 \cb19 \strokec18 Remember how you calculated the Body Mass Index for all baseball players? Numpy was able to perform all calculations element-wise. For 2D Numpy arrays this isn't any different! You can combine matrices with single numbers, with vectors, and with other matrices.\cb1 \
\cb19 Execute the code below in the IPython shell and see if you understand:\cb1 \
\pard\pardeftab720\sl200\partightenfactor0

\f1\fs22 \cf22 \cb21 \strokec22 import numpy as np\
np_mat = np.array([[1, 2],\
                   [3, 4],\
                   [5, 6]])\
np_mat * 2\
np_mat + np.array([10, 10])\
np_mat + np_mat\
\pard\pardeftab720\sl200\sa200\partightenfactor0
\cf18 \strokec18 np_baseball
\f3\fs32 \cb19  is coded for you; it's again a 2D Numpy array with 3 columns representing height, weight and age.\cb1 \
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf20 \cb19 \strokec20 Instructions\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls13\ilvl0
\f3\b0\fs32 \cf18 \cb19 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec18 You managed to get hold on the changes in weight, height and age of all baseball players. It is available as a 2D Numpy array, 
\f1\fs22 \cb21 update
\f3\fs32 \cb19 . Add 
\f1\fs22 \cb21 np_baseball
\f3\fs32 \cb19  and 
\f1\fs22 \cb21 update
\f3\fs32 \cb19 and print out the result.\cb1 \
\ls13\ilvl0\cb19 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec18 You want to convert the units of height and weight. As a first step, create a Numpy array with three values: 
\f1\fs22 \cb21 0.0254
\f3\fs32 \cb19 , 
\f1\fs22 \cb21 0.453592
\f3\fs32 \cb19  and 
\f1\fs22 \cb21 1
\f3\fs32 \cb19 . Name this array 
\f1\fs22 \cb21 conversion
\f3\fs32 \cb19 .\cb1 \
\ls13\ilvl0\cb19 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec18 Multiply 
\f1\fs22 \cb21 np_baseball
\f3\fs32 \cb19  with 
\f1\fs22 \cb21 conversion
\f3\fs32 \cb19  and print out the result.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls14\ilvl0\cf20 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec20 \
\pard\tx720\pardeftab720\sl480\partightenfactor0
\cf18 \strokec18 # baseball is available as a regular list of lists\
# update is available as 2D Numpy array\
\
# Import numpy package\
import numpy as np\
\
# Create np_baseball (3 cols)\
np_baseball = np.array(baseball)\
\
# Print out addition of np_baseball and update\
print(np_baseball + update)\
\
# Create Numpy array: conversion\
conversion = ([0.0254, 0.453592, 1])\
\
# Print out product of np_baseball and conversion\
print(np_baseball * conversion)\
\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf23 \cb19 \strokec23 <script.py> output:\
    [[  75.2303559   168.83775102   23.99      ]\
     [  75.02614252  231.09732309   35.69      ]\
     [  73.1544228   215.08167641   31.78      ]\
     ..., \
     [  76.09349925  209.23890778   26.19      ]\
     [  75.82285669  172.21799965   32.01      ]\
     [  73.99484223  203.14402711   28.92      ]]\
    [[  1.8796   81.64656  22.99   ]\
     [  1.8796   97.52228  34.69   ]\
     [  1.8288   95.25432  30.78   ]\
     ..., \
     [  1.905    92.98636  25.19   ]\
     [  1.905    86.18248  31.01   ]\
     [  1.8542   88.45044  27.92   ]]\cf22 \strokec22 \
\pard\tx720\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf18 \cb1 \strokec18 \
\
}