{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 Verdana;\f1\fmodern\fcharset0 Courier;\f2\fswiss\fcharset0 Helvetica;
\f3\fswiss\fcharset0 Helvetica-Light;\f4\froman\fcharset0 Times-Roman;\f5\fnil\fcharset0 STIXGeneral-Regular;
}
{\colortbl;\red255\green255\blue255;\red46\green46\blue46;\red255\green255\blue255;\red26\green26\blue26;
\red76\green76\blue76;\red246\green246\blue246;\red0\green0\blue0;\red99\green99\blue99;\red38\green38\blue38;
\red237\green237\blue237;\red252\green251\blue251;\red12\green99\blue160;\red0\green57\blue84;\red44\green44\blue44;
\red44\green154\blue192;\red230\green241\blue245;\red187\green81\blue85;\red253\green176\blue178;\red123\green83\blue30;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid101\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl460\partightenfactor0

\f0\fs38 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 REVIEW QUESTION 1
\fs32 \cf4 \strokec4  \cf5 \strokec5 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf4 \strokec4 What can you say about the 
\f1\fs28 \cb6 append()
\f0\fs32 \cb3  method?\cb1 \
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \cb3 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 append()
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  is a method, but it's not a function.\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  In Python, methods are functions that 
\i \shad\shadx0\shady-20\shadr0\shado102 \shadc0 belong to
\i0 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  Python objects. 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 append()
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  is a method, and therefore also a function. \
\pard\pardeftab720\sl384\partightenfactor0
\cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 In Python, methods are functions that <i>belong to</i> Python objects. <code>append()</code> is a method, and therefore also a function. - correct\
\pard\pardeftab720\sl384\partightenfactor0
\cf2 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 append()
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  is a function, not a method.\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 append()
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  is neither a function, nor a method; it's a keyword.\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf8 \cb3 \strokec8 \shad0 EXPLANATION\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\b0\fs32 \cf4 \cb3 \strokec4 In Python, practically everything is an object. Every python object can have functions associated. These functions are also called methods.\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\f2\b\fs26 \cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 FINAL CHECK\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf4 \strokec4 \shad0  
\f2\b\fs26 \cf3 \cb12 \strokec3 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 SAVE\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf4 \strokec4 \shad0  \
\pard\pardeftab720\sl300\qc\partightenfactor0

\f2\b\fs26 \cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 TOGGLE ANSWER VISIBILITY\
\pard\pardeftab720\sl300\partightenfactor0
\cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 HIDE ANSWER
\f0\b0\fs32 \cf4 \cb3 \strokec4 \shad0  
\i \cf5 \strokec5 You have used 1 of 2 submissions
\i0 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl460\partightenfactor0

\fs38 \cf2 \cb3 \strokec2 REVIEW QUESTION 2
\fs32 \cf4 \strokec4  \cf5 \strokec5 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf4 \strokec4 Suppose I have a string 
\f1\fs28 \cb6 x
\f0\fs32 \cb3 , defined as follows:
\f1\fs26 \cb6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 x = "monty python says hi!"\
\pard\pardeftab720\sl400\partightenfactor0

\fs28 \cf4 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f0\fs32 \cf4 \cb1 \
\cb3 What's the correct Python command to capitalize this string 
\f1\fs28 \cb6 x
\f0\fs32 \cb3 ?\cb1 \
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \cb3 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 capitalize(x)
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 x.capitalize()
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  \
\pard\pardeftab720\sl384\partightenfactor0
\cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 <code>x.capitalize()</code> - correct\
\pard\pardeftab720\sl384\partightenfactor0
\cf2 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 capitalize x
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 x.capitalize
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf8 \cb3 \strokec8 \shad0 EXPLANATION\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\b0\fs32 \cf4 \cb3 \strokec4 Use the dot notation to call a method 
\i on
\i0  an object, 
\f1\fs28 \cb6 x
\f0\fs32 \cb3  in this case. Make sure to include the parentheses at the end, even if you don't pass any additional arguments.\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\f2\b\fs26 \cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 FINAL CHECK\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf4 \strokec4 \shad0  
\f2\b\fs26 \cf3 \cb12 \strokec3 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 SAVE\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf4 \strokec4 \shad0  \
\pard\pardeftab720\sl300\qc\partightenfactor0

\f2\b\fs26 \cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 TOGGLE ANSWER VISIBILITY\
\pard\pardeftab720\sl300\partightenfactor0
\cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 HIDE ANSWER
\f0\b0\fs32 \cf4 \cb3 \strokec4 \shad0  
\i \cf5 \strokec5 You have used 1 of 2 submissions
\i0 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl460\partightenfactor0

\fs38 \cf2 \cb3 \strokec2 REVIEW QUESTION 3
\fs32 \cf4 \strokec4  \cf5 \strokec5 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf4 \strokec4 In the video, you got to know the 
\f1\fs28 \cb6 append()
\f0\fs32 \cb3  method. Consider the following two Python commands:
\f1\fs26 \cb6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 x = [4, 9, 5, 7]\
x.append(6)\
\pard\pardeftab720\sl400\partightenfactor0

\fs28 \cf4 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f0\fs32 \cf4 \cb1 \
\cb3 How does the list 
\f1\fs28 \cb6 x
\f0\fs32 \cb3  look after executing these two commands?\cb1 \
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \cb3 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 [4, 9, 5, 7]
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 [6, 4, 9, 5, 7]
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 [4, 9, 5, 7, 6]
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  \
\pard\pardeftab720\sl384\partightenfactor0
\cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 <code>[4, 9, 5, 7, 6]</code> - correct\
\pard\pardeftab720\sl384\partightenfactor0
\cf2 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 [4, 9, 6, 5, 7]
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf8 \cb3 \strokec8 \shad0 EXPLANATION\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\b0\fs32 \cf4 \cb3 \strokec4 If you call 
\f1\fs28 \cb6 append()
\f0\fs32 \cb3  on a list, you're actually adding the element to the list you called 
\f1\fs28 \cb6 append()
\f0\fs32 \cb3  on; there's no need for an explicit assignment (with the 
\f1\fs28 \cb6 =
\f0\fs32 \cb3  sign) in this case.\cb1 \
\
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf14 \cb3 \strokec14 String Methods\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf3 \cb15 \strokec3 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf14 \cb3 \strokec14 Strings come with a bunch of methods. Follow the instructions closely to discover some of them. If you want to discover them in more detail, you can always type 
\f1\fs22 \cb16 help(str)
\f3\fs32 \cb3  in the IPython Shell.\cb1 \
\cb3 A string 
\f1\fs22 \cb16 room
\f3\fs32 \cb3  has already been created for you to experiment with.\cb1 \
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf15 \cb3 \strokec15 Instructions\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls1\ilvl0
\f3\b0\fs32 \cf14 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Use the {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/stdtypes.html#str.upper"}}{\fldrslt 
\f1\fs22 \cf15 \cb16 \strokec15 upper()}} method on 
\f1\fs22 \cb16 room
\f3\fs32 \cb3  and store the result in 
\f1\fs22 \cb16 room_up
\f3\fs32 \cb3 . Use the dot notation.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Print out 
\f1\fs22 \cb16 room
\f3\fs32 \cb3  and 
\f1\fs22 \cb16 room_up
\f3\fs32 \cb3 . Did both change?\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Print out the number of o's on the variable 
\f1\fs22 \cb16 room
\f3\fs32 \cb3  by calling {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/stdtypes.html#str.count"}}{\fldrslt 
\f1\fs22 \cf15 \cb16 \strokec15 count()}} on 
\f1\fs22 \cb16 room
\f3\fs32 \cb3  and passing the letter 
\f1\fs22 \cb16 "o"
\f3\fs32 \cb3  as an input to the method. We're talking about the variable 
\f1\fs22 \cb16 room
\f3\fs32 \cb3 , not the word 
\f1\fs22 \cb16 "room"
\f3\fs32 \cb3 !\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\partightenfactor0
\ls2\ilvl0
\f4\b\fs36 \cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		{\field{\*\fldinst{HYPERLINK "https://campus.datacamp.com/"}}{\fldrslt \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \uc0\u8232 }}
\f2\b0\fs22 \cb17 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \uc0\u8232 
\f3\fs32 \cf15 \cb1 \strokec15 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\partightenfactor0
\ls2\ilvl0
\f4\b\fs36 \cf17 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		{\field{\*\fldinst{HYPERLINK "https://campus.datacamp.com/"}}{\fldrslt \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec17 \uc0\u8232 }}
\f3\b0\fs22 \cb18 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec17 \uc0\u8232 
\fs32 \cf15 \cb1 \strokec15 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\partightenfactor0
\ls2\ilvl0\cf15 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		# string to experiment with: room\
		room = "poolhouse"\
		\
		# Use upper() on room: room_up\
		room_up = room.upper()\
		\
		# Print out room and room_up\
		print(room)\
		print(room_up)\
		\
		# Print out the number of o's in room\
		print(room.count("o"))\
		\
\pard\pardeftab720\sl300\partightenfactor0
\ls2\ilvl0
\f1\fs22 \cf19 \cb3 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec19 <script.py> output:\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec19     poolhouse\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec19     POOLHOUSE\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec19     3\cf9 \strokec9 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f3\fs32 \cf14 \strokec14 Strings are not the only Python types that have methods associated with them. Lists, floats, integers and booleans are also types that come packaged with a bunch of useful methods. In this exercise, you'll be experimenting with:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl200\partightenfactor0
\ls3\ilvl0
\f1\fs22 \cf15 \cb16 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/stdtypes.html#str.index"}}{\fldrslt \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 index()}}
\f3\fs32 \cf14 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 , to get the index of the first element of a list that matches its input and\cb1 \
\ls3\ilvl0
\f1\fs22 \cf15 \cb16 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/stdtypes.html#str.count"}}{\fldrslt \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 count()}}
\f3\fs32 \cf14 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 , to get the number of times an element appears in a list.\cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0
\cf14 \cb3 You'll be working on the list with the area of different parts of a house: 
\f1\fs22 \cb16 areas
\f3\fs32 \cb3 .\cb1 \
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf15 \cb3 \strokec15 Instructions\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls4\ilvl0
\f3\b0\fs32 \cf14 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Use the {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/stdtypes.html#str.index"}}{\fldrslt 
\f1\fs22 \cf15 \cb16 \strokec15 index()}} method to get the index of the element in 
\f1\fs22 \cb16 areas
\f3\fs32 \cb3  that is equal to 
\f1\fs22 \cb16 20.0
\f3\fs32 \cb3 . Print out this index.\cb1 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Call {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/stdtypes.html#str.count"}}{\fldrslt 
\f1\fs22 \cf15 \cb16 \strokec15 count()}} on 
\f1\fs22 \cb16 areas
\f3\fs32 \cb3  to find out how many times 
\f1\fs22 \cb16 14.5
\f3\fs32 \cb3  appears in the list. Again, simply print out this number.\cb1 \
\pard\tx720\pardeftab720\sl360\partightenfactor0
\cf15 \strokec15 \
# Create list areas\
areas = [11.25, 18.0, 20.0, 10.75, 9.50]\
areas.index(20.0)\
# Print out the index of the element 20.0\
print(areas.index(20.0))\
\
# Print out how often 14.5 appears in areas\
print(areas.count(14.5))\
\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf19 \cb3 \strokec19 <script.py> output:\
    2\
    0\cf9 \strokec9 \
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf14 \strokec14 List Methods (2)\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf3 \cb15 \strokec3 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf14 \cb3 \strokec14 Most list methods will change the list they're called on. Examples are:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl200\partightenfactor0
\ls5\ilvl0
\f1\fs22 \cf15 \cb16 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/stdtypes.html#typesseq-mutable"}}{\fldrslt \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 append()}}
\f3\fs32 \cf14 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 , that adds an element to the list it is called on,\cb1 \
\ls5\ilvl0
\f1\fs22 \cf15 \cb16 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/stdtypes.html#typesseq-mutable"}}{\fldrslt \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 remove()}}
\f3\fs32 \cf14 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 , that removes the first element of a list that matches the input, and\cb1 \
\ls5\ilvl0
\f1\fs22 \cf15 \cb16 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/stdtypes.html#typesseq-mutable"}}{\fldrslt \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 reverse()}}
\f3\fs32 \cf14 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 , that reverses the order of the elements in the list it is called on.\cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0
\cf14 \cb3 You'll be working on the list with the area of different parts of the house:
\f1\fs22 \cb16 areas
\f3\fs32 \cb3 .\cb1 \
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf15 \cb3 \strokec15 Instructions\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls6\ilvl0
\f3\b0\fs32 \cf14 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Use {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/stdtypes.html#typesseq-mutable"}}{\fldrslt 
\f1\fs22 \cf15 \cb16 \strokec15 append()}} twice to add the size of the poolhouse and the garage again: 
\f1\fs22 \cb16 24.5
\f3\fs32 \cb3  and 
\f1\fs22 \cb16 15.45
\f3\fs32 \cb3 , respectively. Make sure to add them in this order.\cb1 \
\ls6\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Print out 
\f1\fs22 \cb16 areas
\f3\fs32 \cb1 \
\ls6\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Use the {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/stdtypes.html#typesseq-mutable"}}{\fldrslt 
\f1\fs22 \cf15 \cb16 \strokec15 reverse()}} method to reverse the order of the elements in 
\f1\fs22 \cb16 areas
\f3\fs32 \cb3 .\cb1 \
\ls6\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Print out 
\f1\fs22 \cb16 areas
\f3\fs32 \cb3  once more.\cb1 \
# Create list areas\
areas = [11.25, 18.0, 20.0, 10.75, 9.50]\
\
# Use append twice to add poolhouse and garage size\
areas.append(24.5)\
areas.append(15.45)\
\
\
# Print out areas\
print(areas)\
\
# Reverse the orders of the elements in areas\
areas.reverse()\
\
# Print out areas\
print(areas)\
\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf19 \cb3 \strokec19 <script.py> output:\
    [11.25, 18.0, 20.0, 10.75, 9.5, 24.5, 15.45]\
    [15.45, 24.5, 9.5, 10.75, 20.0, 18.0, 11.25]\
\
\pard\pardeftab720\sl460\partightenfactor0

\f0\fs38 \cf2 \strokec2 REVIEW QUESTION 1
\fs32 \cf4 \strokec4  \cf5 \strokec5 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf4 \strokec4 Which package installation and maintance system for Python did Filip talk about in the video?\cb1 \
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \cb3 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  pip \
\cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 pip - correct\
\cf2 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  pypackage\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  module\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  pkginstaller\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf8 \cb3 \strokec8 \shad0 EXPLANATION\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\b0\fs32 \cf4 \cb3 \strokec4 pip is a very commonly used tool to install and maintain Python packages.\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\f2\b\fs26 \cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 FINAL CHECK\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf4 \strokec4 \shad0  
\f2\b\fs26 \cf3 \cb12 \strokec3 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 SAVE\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf4 \strokec4 \shad0  \
\pard\pardeftab720\sl300\qc\partightenfactor0

\f2\b\fs26 \cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 TOGGLE ANSWER VISIBILITY\
\pard\pardeftab720\sl300\partightenfactor0
\cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 HIDE ANSWER
\f0\b0\fs32 \cf4 \cb3 \strokec4 \shad0  
\i \cf5 \strokec5 You have used 1 of 2 submissions
\i0 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl460\partightenfactor0

\fs38 \cf2 \cb3 \strokec2 REVIEW QUESTION 2
\fs32 \cf4 \strokec4  \cf5 \strokec5 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf4 \strokec4 In the video, all the commands to import packages used the same statement. This statement is the most common way to invoke the import machinery. What statement are we talking about here?\cb1 \
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \cb3 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 as
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 from
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 def
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 import
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  \
\cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 <code>import</code> - correct\
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf8 \strokec8 \shad0 EXPLANATION\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\b0\fs32 \cf4 \cb3 \strokec4 The 
\f1\fs28 \cb6 import
\f0\fs32 \cb3  statement is arguably the easiest way to import packages and modules into Python.\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\f2\b\fs26 \cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 FINAL CHECK\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf4 \strokec4 \shad0  
\f2\b\fs26 \cf3 \cb12 \strokec3 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 SAVE\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf4 \strokec4 \shad0  \
\pard\pardeftab720\sl300\qc\partightenfactor0

\f2\b\fs26 \cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 TOGGLE ANSWER VISIBILITY\
\pard\pardeftab720\sl300\partightenfactor0
\cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 HIDE ANSWER
\f0\b0\fs32 \cf4 \cb3 \strokec4 \shad0  
\i \cf5 \strokec5 You have used 1 of 2 submissions
\i0 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl460\partightenfactor0

\fs38 \cf2 \cb3 \strokec2 REVIEW QUESTION 3
\fs32 \cf4 \strokec4  \cf5 \strokec5 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf4 \strokec4 In the video, you saw how Numpy could be imported as 
\f1\fs28 \cb6 np
\f0\fs32 \cb3 . Suppose that instead of importing it as 
\f1\fs28 \cb6 np
\f0\fs32 \cb3 , you decide to import it as 
\f1\fs28 \cb6 foo
\f0\fs32 \cb3 :
\f1\fs26 \cb6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 import numpy as foo\
\pard\pardeftab720\sl400\partightenfactor0

\fs28 \cf4 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f0\fs32 \cf4 \cb1 \
\cb3 Which Python command that used the 
\f1\fs28 \cb6 array()
\f0\fs32 \cb3  function from Numpy is valid if Numpy is imported as 
\f1\fs28 \cb6 foo
\f0\fs32 \cb3 ?\cb1 \
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \cb3 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 numpy.array([1, 2, 3])
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 np.array([1, 2, 3])
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 foo.array([1, 2, 3])
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  \
\cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 <code>foo.array([1, 2, 3])</code> - correct\
\cf2 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 np.foo.array([1, 2, 3])
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf8 \cb3 \strokec8 \shad0 EXPLANATION\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\b0\fs32 \cf4 \cb3 \strokec4 If Numpy is imported as 
\f1\fs28 \cb6 np
\f0\fs32 \cb3 , you need 
\f1\fs28 \cb6 np.array()
\f0\fs32 \cb3 . If Numpy is imported as 
\f1\fs28 \cb6 foo
\f0\fs32 \cb3 , you need
\f1\fs28 \cb6 foo.array()
\f0\fs32 \cb3 .\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\f2\b\fs26 \cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 FINAL CHECK\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf4 \strokec4 \shad0  
\f2\b\fs26 \cf3 \cb12 \strokec3 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 SAVE\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf4 \strokec4 \shad0  \
\pard\pardeftab720\sl300\qc\partightenfactor0

\f2\b\fs26 \cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 TOGGLE ANSWER VISIBILITY\
\pard\pardeftab720\sl300\partightenfactor0
\cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 HIDE ANSWER
\f0\b0\fs32 \cf4 \cb3 \strokec4 \shad0  
\i \cf5 \strokec5 You have used 1 of 2 submissions
\i0 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl460\partightenfactor0

\fs38 \cf2 \cb3 \strokec2 REVIEW QUESTION 4
\fs32 \cf4 \strokec4  \cf5 \strokec5 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf4 \strokec4 Suppose you want to use Numpy's 
\f1\fs28 \cb6 array()
\f0\fs32 \cb3  function.\cb1 \
\cb3 You can import this function as follows:
\f1\fs26 \cb6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 from numpy import array\
\pard\pardeftab720\sl400\partightenfactor0

\fs28 \cf4 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f0\fs32 \cf4 \cb1 \
\cb3 or you can import the entire numpy package:
\f1\fs26 \cb6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 import numpy\
\pard\pardeftab720\sl400\partightenfactor0

\fs28 \cf4 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f0\fs32 \cf4 \cb1 \
\cb3 Select the two statements about this difference that hold.\cb1 \
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \cb3 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  The 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 from numpy import array
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  version will make it less clear in the code that you're using Numpy's
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 array()
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  function. \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  If you use 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 from numpy import array
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  to import Numpy's 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 array()
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  function, you always have to write
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 numpy.array()
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  if you want to use it.\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  The 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 import numpy
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  way of importing makes your calls of the 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 array()
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  function very short and concise.\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  Using 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 import numpy
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  will require you to use 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 numpy.array()
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 , making it clear that you're using a Numpy function. \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\pard\pardeftab720\sl448\partightenfactor0

\fs32 \cf7 \cb3 \strokec7 \shad0 The
\f1\fs28 \cb6 from numpy import array
\f0\fs32 \cb3 version will make it less clear in the code that you're using Numpy's
\f1\fs28 \cb6 array()
\f0\fs32 \cb3 function., Using
\f1\fs28 \cb6 import numpy
\f0\fs32 \cb3 will require you to use
\f1\fs28 \cb6 numpy.array()
\f0\fs32 \cb3 , making it clear that you're using a Numpy function., - correct\
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf8 \strokec8 EXPLANATION\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\b0\fs32 \cf4 \cb3 \strokec4 Importing a particular function makes your code shorter, because you don't need to include the 
\f1\fs28 \cb6 numpy.
\f0\fs32 \cb3 prefix. However, It becomes less clear that 
\f1\fs28 \cb6 array()
\f0\fs32 \cb3  is a function from the 
\f1\fs28 \cb6 numpy
\f0\fs32 \cb3  package.\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf9 \cb3 \strokec9 \
\
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf14 \strokec14 Import package\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf3 \cb15 \strokec3 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf14 \cb3 \strokec14 As a data scientist, some notions of geometry never hurt. Let's refresh some of the basics.\cb1 \
\cb3 For a fancy clustering algorithm, you want to find the circumference \
\pard\pardeftab720\sl520\partightenfactor0

\f5\i\fs34 \cf14 \up0 C
\f2\i0 \cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f5\fs32 \cf14 \cb3 C
\f3 \up0 and area \
\pard\pardeftab720\sl520\partightenfactor0

\f5\i\fs34 \cf14 \up0 A
\f2\i0 \cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f5\fs32 \cf14 \cb3 A
\f3 \up0  of a circle. When the radius of the circle is 
\f1\fs22 \cb16 r
\f3\fs32 \cb3 , you can calculate \
\pard\pardeftab720\sl520\partightenfactor0

\f5\i\fs34 \cf14 \up0 C
\f2\i0 \cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f5\fs32 \cf14 \cb3 C
\f3 \up0  and \
\pard\pardeftab720\sl520\partightenfactor0

\f5\i\fs34 \cf14 \up0 A
\f2\i0 \cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f5\fs32 \cf14 \cb3 A
\f3 \up0  as:\cb1 \
\
\pard\pardeftab720\sl520\partightenfactor0

\f5\i\fs34 \cf14 \cb3 \up0 C
\i0 =2
\i \uc0\u960 r
\f2\i0 \cb1 \
\pard\pardeftab720\sl480\qc\partightenfactor0

\f5\fs32 \cf14 \cb3 C=2\uc0\u960 r
\f3 \cb1 \up0 \
\pard\pardeftab720\sl520\partightenfactor0

\f5\i\fs34 \cf14 \cb3 \up0 A
\i0 =
\i \uc0\u960 r
\i0\fs24 2
\f2\fs34 \cb1 \
\pard\pardeftab720\sl480\qc\partightenfactor0

\f5\fs32 \cf14 \cb3 A=\uc0\u960 r
\fs24 2\cb1 \up0 \
\pard\pardeftab720\sl480\sa320\partightenfactor0

\f3\fs32 \cf14 \
\pard\pardeftab720\sl480\sa200\partightenfactor0
\cf14 \cb3 To use the constant 
\f1\fs22 \cb16 pi
\f3\fs32 \cb3 , you'll need the 
\f1\fs22 \cb16 math
\f3\fs32 \cb3  package. A variable 
\f1\fs22 \cb16 r
\f3\fs32 \cb3  is already coded in the script. Fill in the code to calculate 
\f1\fs22 \cb16 C
\f3\fs32 \cb3  and 
\f1\fs22 \cb16 A
\f3\fs32 \cb3  and see how the {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html#print"}}{\fldrslt 
\f1\fs22 \cf15 \cb16 \strokec15 print()}} functions create some nice printouts.\cb1 \
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf15 \cb3 \strokec15 Instructions\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls7\ilvl0
\f3\b0\fs32 \cf14 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Import the 
\f1\fs22 \cb16 math
\f3\fs32 \cb3  package. Now you can access the constant 
\f1\fs22 \cb16 pi
\f3\fs32 \cb3  with 
\f1\fs22 \cb16 math.pi
\f3\fs32 \cb3 .\cb1 \
\ls7\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Calculate the circumference of the circle and store it in 
\f1\fs22 \cb16 C
\f3\fs32 \cb3 .\cb1 \
\ls7\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Calculate the area of the circle and store it in 
\f1\fs22 \cb16 A
\f3\fs32 \cb3 .\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf9 \cb3 \strokec9 \
\
# Definition of radius\
r = 0.43\
\
# Import the math package\
import math\
\
# Calculate C\
C = 2*math.pi*r\
\
# Calculate A\
A = math.pi*(r**2)\
\
# Build printout\
print("Circumference: " + str(C))\
print("Area: " + str(A))\
\
\pard\pardeftab720\sl300\partightenfactor0
\cf19 \strokec19 <script.py> output:\
    Circumference: 2.701769682087222\
    Area: 0.5808804816487527\
\pard\pardeftab720\sl300\partightenfactor0
\cf9 \strokec9 \
\
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf14 \strokec14 Selective import\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf3 \cb15 \strokec3 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf14 \cb3 \strokec14 General imports, like 
\f1\fs22 \cb16 import math
\f3\fs32 \cb3 , make 
\f2\b all
\f3\b0  functionality from the 
\f1\fs22 \cb16 math
\f3\fs32 \cb3  package available to you. However, if you decide to only use a specific part of a package, you can always make your import more selective:\cb1 \
\pard\pardeftab720\sl200\partightenfactor0

\f1\fs22 \cf9 \cb16 \strokec9 from math import pi\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f3\fs32 \cf14 \cb3 \strokec14 Let's say the Moon's orbit around planet Earth is a perfect circle, with a radius 
\f1\fs22 \cb16 r
\f3\fs32 \cb3  (in km) that is defined in the script.\cb1 \
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf15 \cb3 \strokec15 Instructions\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls8\ilvl0
\f3\b0\fs32 \cf14 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Perform a selective import from the 
\f1\fs22 \cb16 math
\f3\fs32 \cb3  package where you only import the 
\f1\fs22 \cb16 radians
\f3\fs32 \cb3  function.\cb1 \
\ls8\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Calculate the distance travelled by the Moon over 12 degrees of its orbit. Assign the result to 
\f1\fs22 \cb16 dist
\f3\fs32 \cb3 . You can calculate this as 
\f5\i\fs34 \up0 r
\i0 \uc0\u8727 
\i \uc0\u981 
\f2\i0 \cb1 \uc0\u8232 
\f5\fs32 \cb3 r\uc0\u8727 \u981 
\f3 \up0 , where 
\f5\i\fs34 \up0 r
\f2\i0 \cb1 \uc0\u8232 
\f5\fs32 \cb3 r
\f3 \up0  is the radius and 
\f5\i\fs34 \up0 \uc0\u981 
\f2\i0 \cb1 \uc0\u8232 
\f5\fs32 \cb3 \uc0\u981 
\f3 \up0  is the angle in radians. To convert an angle in degrees to an angle in radians, use the {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/math.html#math.radians"}}{\fldrslt 
\f1\fs22 \cf15 \cb16 \strokec15 radians()}} function, which you just imported.\cb1 \
\ls8\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Print out 
\f1\fs22 \cb16 dist
\f3\fs32 \cb3 .\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf9 \cb3 \strokec9 \
# Definition of radius\
r = 192500\
\
# Import radians function of math package\
from math import radians\
\
# Travel distance of Moon if 12 degrees. Store in dist.\
dist = r*radians(12)\
\
# Print out dist\
print(dist)\
\
\pard\pardeftab720\sl300\partightenfactor0
\cf19 \strokec19 <script.py> output:\
    40317.10572106901\cf9 \strokec9 \
\
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf14 \strokec14 Different ways of importing\
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf3 \cb15 \strokec3 50xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf14 \cb3 \strokec14 There are several ways to import packages and modules into Python. Depending on the import call, you'll have to use different Python code.\cb1 \
\cb3 Suppose you want to use the function {\field{\*\fldinst{HYPERLINK "http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.linalg.inv.html"}}{\fldrslt 
\f1\fs22 \cf15 \cb16 \strokec15 inv()}}, which is in the 
\f1\fs22 \cb16 linalg
\f3\fs32 \cb3  subpackage of the 
\f1\fs22 \cb16 scipy
\f3\fs32 \cb3  package. You want to be able to use this function as follows:\cb1 \
\pard\pardeftab720\sl200\partightenfactor0

\f1\fs22 \cf9 \cb16 \strokec9 my_inv([[1,2], [3,4]])\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f3\fs32 \cf14 \cb3 \strokec14 Which 
\f1\fs22 \cb16 import
\f3\fs32 \cb3  statement will you need in order to run the above code without an error?\cb1 \
\pard\pardeftab720\sl288\partightenfactor0

\f1\fs28 \cf14 \cb16 from scipy.linalg import inv as my_inv}