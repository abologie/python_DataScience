{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 Verdana;\f1\fswiss\fcharset0 Helvetica;\f2\fmodern\fcharset0 Courier;
\f3\fswiss\fcharset0 Helvetica-Light;}
{\colortbl;\red255\green255\blue255;\red46\green46\blue46;\red255\green255\blue255;\red26\green26\blue26;
\red76\green76\blue76;\red0\green0\blue0;\red99\green99\blue99;\red38\green38\blue38;\red237\green237\blue237;
\red252\green251\blue251;\red12\green99\blue160;\red0\green57\blue84;\red246\green246\blue246;\red44\green44\blue44;
\red44\green154\blue192;\red230\green241\blue245;\red123\green83\blue30;\red109\green193\blue219;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid101\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl460\partightenfactor0

\f0\fs38 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 REVIEW QUESTION 1
\fs32 \cf4 \strokec4  \cf5 \strokec5 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf4 \strokec4 What is a Python function?\cb1 \
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \cb3 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  An alternative to the Python script\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  An alternative to the Python variable\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  A new kind of data type to store lists with different lengths.\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  A piece of reusable Python code that solves a particular problem. \
\pard\pardeftab720\sl384\partightenfactor0
\cf6 \strokec6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 A piece of reusable Python code that solves a particular problem. - correct\
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf7 \strokec7 \shad0 EXPLANATION\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\b0\fs32 \cf4 \cb3 \strokec4 A function are a block of code, that perform a specific, related action. Functions make your code more modular, so that you can reuse code without having to retype it over and over again.\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\f1\b\fs26 \cf8 \cb9 \strokec8 \shad\shadx0\shady-20\shadr0\shado255 \shadc10 FINAL CHECK\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf6 \cb3 \strokec6 \shad\shadx0\shady-20\shadr0\shado255 \shadc10 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf4 \strokec4 \shad0  
\f1\b\fs26 \cf3 \cb11 \strokec3 \shad\shadx0\shady-20\shadr0\shado255 \shadc12 SAVE\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf6 \cb3 \strokec6 \shad\shadx0\shady-20\shadr0\shado255 \shadc12 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf4 \strokec4 \shad0  \
\pard\pardeftab720\sl300\qc\partightenfactor0

\f1\b\fs26 \cf6 \strokec6 \shad\shadx0\shady-20\shadr0\shado255 \shadc10 TOGGLE ANSWER VISIBILITY\
\pard\pardeftab720\sl300\partightenfactor0
\cf8 \cb9 \strokec8 \shad\shadx0\shady-20\shadr0\shado255 \shadc10 HIDE ANSWER
\f0\b0\fs32 \cf4 \cb3 \strokec4 \shad0  
\i \cf5 \strokec5 You have used 1 of 2 submissions
\i0 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl460\partightenfactor0

\fs38 \cf2 \cb3 \strokec2 REVIEW QUESTION 2
\fs32 \cf4 \strokec4  \cf5 \strokec5 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf4 \strokec4 In the video, you saw how the maximum of a list was calculated. Suppose you have a similar list called 
\f2\fs28 \cb13 x
\f0\fs32 \cb3 . To calculate the minimum value in this list, you can use the 
\f2\fs28 \cb13 min()
\f0\fs32 \cb3  function.\cb1 \
\cb3 What is the correct Python command to do this?\cb1 \
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \cb3 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f2\fs22 \cb13 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 min x
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f2\fs22 \cb13 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 min[x]
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f2\fs22 \cb13 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 min(x)\
\pard\pardeftab720\sl384\partightenfactor0

\f0\fs24 \cf6 \cb3 \strokec6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 <code>min(x)</code> - correct\
\pard\pardeftab720\sl384\partightenfactor0
\cf2 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f2\fs22 \cb13 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 min = x
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\pard\pardeftab720\sl448\partightenfactor0

\fs32 \cf4 \strokec4 \shad0 \
\pard\pardeftab720\sl300\partightenfactor0

\f1\b\fs26 \cf8 \cb9 \strokec8 \shad\shadx0\shady-20\shadr0\shado255 \shadc10 FINAL CHECK\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf6 \cb3 \strokec6 \shad\shadx0\shady-20\shadr0\shado255 \shadc10 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf4 \strokec4 \shad0  
\f1\b\fs26 \cf3 \cb11 \strokec3 \shad\shadx0\shady-20\shadr0\shado255 \shadc12 SAVE\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf6 \cb3 \strokec6 \shad\shadx0\shady-20\shadr0\shado255 \shadc12 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf4 \strokec4 \shad0  \
\pard\pardeftab720\sl300\qc\partightenfactor0

\f1\b\fs26 \cf6 \strokec6 \shad\shadx0\shady-20\shadr0\shado255 \shadc10 TOGGLE ANSWER VISIBILITY\
\pard\pardeftab720\sl300\partightenfactor0
\cf8 \cb9 \strokec8 \shad\shadx0\shady-20\shadr0\shado255 \shadc10 SHOW ANSWER
\f0\b0\fs32 \cf4 \cb3 \strokec4 \shad0  
\i \cf5 \strokec5 You have used 1 of 2 submissions
\i0 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl460\partightenfactor0

\fs38 \cf2 \cb3 \strokec2 REVIEW QUESTION 3
\fs32 \cf4 \strokec4  \cf5 \strokec5 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf4 \strokec4 Before you use a function, you might want to open up its documentation from inside the IPython Shell.\cb1 \
\cb3 What is the correct Python command to open up the documentation on the 
\f2\fs28 \cb13 min
\f0\fs32 \cb3  function?\cb1 \
\pard\pardeftab720\sl380\partightenfactor0
\cf4 \cb3 help(min) \
\pard\pardeftab720\sl448\partightenfactor0
\cf6 \strokec6 help(min) - correct\
\pard\pardeftab720\sl448\partightenfactor0
\cf4 \strokec4  help(min) 
\b or
\b0  help( min ) 
\b or
\b0  help( min ) 
\b or
\b0  ?min 
\b or
\b0  ?min()\cb1 \
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf7 \cb3 \strokec7 EXPLANATION\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\b0\fs32 \cf4 \cb3 \strokec4 You can use 
\f2\fs28 \cb13 help(min)
\f0\fs32 \cb3 . Notice that 
\f2\fs28 \cb13 help()
\f0\fs32 \cb3  is also a function!\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\f1\b\fs26 \cf8 \cb9 \strokec8 \shad\shadx0\shady-20\shadr0\shado255 \shadc10 FINAL CHECK\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf6 \cb3 \strokec6 \shad\shadx0\shady-20\shadr0\shado255 \shadc10 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf4 \strokec4 \shad0  
\f1\b\fs26 \cf3 \cb11 \strokec3 \shad\shadx0\shady-20\shadr0\shado255 \shadc12 SAVE\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf6 \cb3 \strokec6 \shad\shadx0\shady-20\shadr0\shado255 \shadc12 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf4 \strokec4 \shad0  \
\pard\pardeftab720\sl300\qc\partightenfactor0

\f1\b\fs26 \cf6 \strokec6 \shad\shadx0\shady-20\shadr0\shado255 \shadc10 TOGGLE ANSWER VISIBILITY\
\pard\pardeftab720\sl300\partightenfactor0
\cf8 \cb9 \strokec8 \shad\shadx0\shady-20\shadr0\shado255 \shadc10 HIDE ANSWER
\f0\b0\fs32 \cf4 \cb3 \strokec4 \shad0  
\i \cf5 \strokec5 You have used 1 of 2 submissions
\i0 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl460\partightenfactor0

\fs38 \cf2 \cb3 \strokec2 REVIEW QUESTION 4
\fs32 \cf4 \strokec4  \cf5 \strokec5 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf4 \strokec4 The function round has two arguments, as this excerpt of the documentation shows
\f2\fs26 \cb13 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 round(...)\
    round(number[, ndigits]) -> number\
\
    Round a number to a given precision in decimal digits (default 0 digits).\
    This returns an int when called with one argument, otherwise the\
    same type as the number. ndigits may be negative.\
\pard\pardeftab720\sl400\partightenfactor0

\fs28 \cf4 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f0\fs32 \cf4 \cb1 \
\cb3 Select the two correct statements about these arguments.\cb1 \
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \cb3 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f2\fs22 \cb13 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 number
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  is a required argument. \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f2\fs22 \cb13 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 number
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  is an optional argument.\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f2\fs22 \cb13 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 ndigits
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  is a required argument.\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f2\fs22 \cb13 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 ndigits
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  is an optional argument. \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\pard\pardeftab720\sl448\partightenfactor0

\f2\fs28 \cf6 \cb13 \strokec6 \shad0 number
\f0\fs32 \cb3 is a required argument.,
\f2\fs28 \cb13 ndigits
\f0\fs32 \cb3 is an optional argument., - correct\
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf7 \strokec7 EXPLANATION\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\b0\fs32 \cf4 \cb3 \strokec4 From the square brackets in the second line of the documentation, you can tell that 
\f2\fs28 \cb13 ndigits
\f0\fs32 \cb3  is an optional argument.\
\
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f1\b\fs48 \cf14 \strokec14 Familiar functions\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf3 \cb15 \strokec3 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf14 \cb3 \strokec14 Out of the box, Python offers a bunch of built-in functions to make your life as a data scientist easier. You already know two such functions: {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html#print"}}{\fldrslt 
\f2\fs22 \cf15 \cb16 \strokec15 print()}} and {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html#type"}}{\fldrslt 
\f2\fs22 \cf15 \cb16 \strokec15 type()}}. You've also used the functions {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html#func-str"}}{\fldrslt 
\f2\fs22 \cf15 \cb16 \strokec15 str()}}, {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html#int"}}{\fldrslt 
\f2\fs22 \cf15 \cb16 \strokec15 int()}}, {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html#bool"}}{\fldrslt 
\f2\fs22 \cf15 \cb16 \strokec15 bool()}} and {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html#float"}}{\fldrslt 
\f2\fs22 \cf15 \cb16 \strokec15 float()}} to switch between data type. These are built-in functions as well.\cb1 \
\cb3 Calling a function is easy. To get the type of 
\f2\fs22 \cb16 3.0
\f3\fs32 \cb3  and store the output as a new variable, 
\f2\fs22 \cb16 result
\f3\fs32 \cb3 , you can use the following:\cb1 \
\pard\pardeftab720\sl200\partightenfactor0

\f2\fs22 \cf8 \cb16 \strokec8 result = type(3.0)\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f3\fs32 \cf14 \cb3 \strokec14 The general recipe for calling functions is thus:\cb1 \
\pard\pardeftab720\sl200\partightenfactor0

\f2\fs22 \cf8 \cb16 \strokec8 output = function_name(input)\
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f1\b\fs34 \cf15 \cb3 \strokec15 Instructions\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls1\ilvl0
\f3\b0\fs32 \cf14 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Use {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html#print"}}{\fldrslt 
\f2\fs22 \cf15 \cb16 \strokec15 print()}} in combination with {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html#type"}}{\fldrslt 
\f2\fs22 \cf15 \cb16 \strokec15 type()}} to print out the type of 
\f2\fs22 \cb16 var1
\f3\fs32 \cb3 .\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Use {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html#len"}}{\fldrslt 
\f2\fs22 \cf15 \cb16 \strokec15 len()}} to get the length of the list 
\f2\fs22 \cb16 var1
\f3\fs32 \cb3 . Wrap it in a {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html#print"}}{\fldrslt 
\f2\fs22 \cf15 \cb16 \strokec15 print()}} call to directly print it out.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Use {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html#int"}}{\fldrslt 
\f2\fs22 \cf15 \cb16 \strokec15 int()}} to convert 
\f2\fs22 \cb16 var2
\f3\fs32 \cb3  to an integer. Store the output as 
\f2\fs22 \cb16 out2
\f3\fs32 \cb3 .\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\f0 \cf4 \strokec4 \
\pard\pardeftab720\sl300\partightenfactor0

\f2\fs22 \cf17 \cb3 \strokec17 <script.py> output:\
    <class 'list'>\
    4\cf8 \strokec8 \
\
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f1\b\fs48 \cf14 \strokec14 Help!\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf3 \cb15 \strokec3 50xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf14 \cb3 \strokec14 Maybe you already know the name of a Python function, but you still have to figure out how to use it. Ironically, you have to ask for information about a function with another function: {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html#help"}}{\fldrslt 
\f2\fs22 \cf15 \cb16 \strokec15 help()}}. In IPython specifically, you can also use 
\f2\fs22 \cb16 ?
\f3\fs32 \cb3  before the function name.\cb1 \
\cb3 To get help on the {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html#max"}}{\fldrslt 
\f2\fs22 \cf15 \cb16 \strokec15 max()}} function, for example, you can use one of these calls:\cb1 \
\pard\pardeftab720\sl200\partightenfactor0

\f2\fs22 \cf8 \cb16 \strokec8 help(max)\
?max\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f3\fs32 \cf14 \cb3 \strokec14 Use the Shell on the right to open up the documentation on {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html#complex"}}{\fldrslt 
\f2\fs22 \cf15 \cb16 \strokec15 complex()}}. Which of the following statements is true?\cb1 \
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f1\b\fs34 \cf15 \cb3 \strokec15 Possible Answers\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\partightenfactor0
\ls2\ilvl0
\f3\b0\fs32 \cf15 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 \uc0\u8232 {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html#complex"}}{\fldrslt 
\f2\fs22 \cb16 complex()}}
\f1 \cf18 \cb3 \strokec18  takes exactly two arguments: 
\f2\fs22 \cf14 \cb16 \strokec14 real
\f1\fs32 \cf18 \cb3 \strokec18  and 
\f2\fs22 \cf14 \cb16 \strokec14 [, imag]
\f1\fs32 \cf18 \cb3 \strokec18 .
\f3 \cf14 \cb1 \strokec14 \
\ls2\ilvl0\cf15 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 \uc0\u8232 {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html#complex"}}{\fldrslt 
\f2\fs22 \cb16 complex()}}
\f1 \cf18 \cb3 \strokec18  takes two arguments: 
\f2\fs22 \cf14 \cb16 \strokec14 real
\f1\fs32 \cf18 \cb3 \strokec18  and 
\f2\fs22 \cf14 \cb16 \strokec14 imag
\f1\fs32 \cf18 \cb3 \strokec18 . Both these arguments are required.
\f3 \cf14 \cb1 \strokec14 \
\ls2\ilvl0\cf15 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 \uc0\u8232 {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html#complex"}}{\fldrslt 
\f2\fs22 \cb16 complex()}}
\f1 \cb3  takes two arguments: 
\f2\fs22 \cf14 \cb16 \strokec14 real
\f1\fs32 \cf15 \cb3 \strokec15  and 
\f2\fs22 \cf14 \cb16 \strokec14 imag
\f1\fs32 \cf15 \cb3 \strokec15 . 
\f2\fs22 \cf14 \cb16 \strokec14 real
\f1\fs32 \cf15 \cb3 \strokec15  is a required argument, 
\f2\fs22 \cf14 \cb16 \strokec14 imag
\f1\fs32 \cf15 \cb3 \strokec15  is an optional argument.
\f3 \cf14 \cb1 \strokec14 \
\ls2\ilvl0\cf15 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 \uc0\u8232 {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html#complex"}}{\fldrslt 
\f2\fs22 \cb16 complex()}}
\f1 \cf18 \cb3 \strokec18  takes two arguments: 
\f2\fs22 \cf14 \cb16 \strokec14 real
\f1\fs32 \cf18 \cb3 \strokec18  and 
\f2\fs22 \cf14 \cb16 \strokec14 imag
\f1\fs32 \cf18 \cb3 \strokec18 . If you don't specify 
\f2\fs22 \cf14 \cb16 \strokec14 imag
\f1\fs32 \cf18 \cb3 \strokec18 , it is set to 1 by Pytho
\f3 \cf14 \cb1 \strokec14 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 \
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f1\b\fs48 \cf14 \cb3 Multiple arguments\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf3 \cb15 \strokec3 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf14 \cb3 \strokec14 In the previous exercise, the square brackets around 
\f2\fs22 \cb16 imag
\f3\fs32 \cb3  in the documentation showed us that the 
\f2\fs22 \cb16 imag
\f3\fs32 \cb3  argument is optional. But Python also uses a different way to tell users about arguments being optional.\cb1 \
\cb3 Have a look at the documentation of {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html#sorted"}}{\fldrslt 
\f2\fs22 \cf15 \cb16 \strokec15 sorted()}} by typing 
\f2\fs22 \cb16 help(sorted)
\f3\fs32 \cb3  in the IPython Shell.\cb1 \
\cb3 You'll see that {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html#sorted"}}{\fldrslt 
\f2\fs22 \cf15 \cb16 \strokec15 sorted()}} takes three arguments: 
\f2\fs22 \cb16 iterable
\f3\fs32 \cb3 , 
\f2\fs22 \cb16 key
\f3\fs32 \cb3  and 
\f2\fs22 \cb16 reverse
\f3\fs32 \cb3 .\cb1 \
\pard\pardeftab720\sl200\sa200\partightenfactor0

\f2\fs22 \cf14 \cb16 key=None
\f3\fs32 \cb3  means that if you don't specify the 
\f2\fs22 \cb16 key
\f3\fs32 \cb3  argument, it will be 
\f2\fs22 \cb16 None
\f3\fs32 \cb3 . 
\f2\fs22 \cb16 reverse=False
\f3\fs32 \cb3  means that if you don't specify the
\f2\fs22 \cb16 reverse
\f3\fs32 \cb3  argument, it will be 
\f2\fs22 \cb16 False
\f3\fs32 \cb3 .\cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0
\cf14 \cb3 In this exercise, you'll only have to specify 
\f2\fs22 \cb16 iterable
\f3\fs32 \cb3  and 
\f2\fs22 \cb16 reverse
\f3\fs32 \cb3 , not 
\f2\fs22 \cb16 key
\f3\fs32 \cb3 . The first input you pass to {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html#sorted"}}{\fldrslt 
\f2\fs22 \cf15 \cb16 \strokec15 sorted()}} will obviously be matched to the 
\f2\fs22 \cb16 iterable
\f3\fs32 \cb3  argument, but what about the second input? To tell Python you want to specify 
\f2\fs22 \cb16 reverse
\f3\fs32 \cb3 without changing anything about 
\f2\fs22 \cb16 key
\f3\fs32 \cb3 , you can use 
\f2\fs22 \cb16 =
\f3\fs32 \cb3 :\cb1 \
\pard\pardeftab720\sl200\partightenfactor0

\f2\fs22 \cf8 \cb16 \strokec8 sorted(___, reverse = ___)\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f3\fs32 \cf14 \cb3 \strokec14 Two lists have been created for you on the right. Can you paste them together and sort them in descending order?\cb1 \
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f1\b\fs34 \cf15 \cb3 \strokec15 Instructions\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls3\ilvl0
\f3\b0\fs32 \cf14 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Use 
\f2\fs22 \cb16 +
\f3\fs32 \cb3  to merge the contents of 
\f2\fs22 \cb16 first
\f3\fs32 \cb3  and 
\f2\fs22 \cb16 second
\f3\fs32 \cb3 into a new list: 
\f2\fs22 \cb16 full
\f3\fs32 \cb3 .\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Call {\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html#sorted"}}{\fldrslt 
\f2\fs22 \cf15 \cb16 \strokec15 sorted()}} on 
\f2\fs22 \cb16 full
\f3\fs32 \cb3  and specify the 
\f2\fs22 \cb16 reverse
\f3\fs32 \cb3 argument to be 
\f2\fs22 \cb16 True
\f3\fs32 \cb3 . Save the sorted list as 
\f2\fs22 \cb16 full_sorted
\f3\fs32 \cb3 .\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Finish off by printing out 
\f2\fs22 \cb16 full_sorted
\f3\fs32 \cb3 .\cb1 \
\pard\tx720\pardeftab720\sl360\partightenfactor0
\cf14 \
# Create lists first and second\
first = [11.25, 18.0, 20.0]\
second = [10.75, 9.50]\
\
# Paste together first and second: full\
full = first + second\
\
# Sort full in descending order: full_sorted\
full_sorted = sorted(full, reverse = True)\
\
# Print out full_sorted\
print(full_sorted)\
\
\pard\pardeftab720\sl300\partightenfactor0

\f2\fs22 \cf8 \cb3 \strokec8 In [1]: help(sorted)\
\cf17 \strokec17 Help on built-in function sorted in module builtins:\
\
sorted(...)\
    sorted(iterable, key=None, reverse=False) --> new sorted list\
\
<script.py> output:\
    [20.0, 18.0, 11.25, 10.75, 9.5]\cf8 \strokec8 \
\pard\tx720\pardeftab720\sl360\partightenfactor0

\f3\fs32 \cf14 \cb1 \strokec14 \
}