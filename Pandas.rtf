{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 Verdana;\f1\fmodern\fcharset0 Courier;\f2\fswiss\fcharset0 Helvetica;
\f3\fswiss\fcharset0 Helvetica-Light;\f4\fmodern\fcharset0 Courier-Oblique;\f5\froman\fcharset0 Times-Roman;
}
{\colortbl;\red255\green255\blue255;\red46\green46\blue46;\red255\green255\blue255;\red76\green76\blue76;
\red26\green26\blue26;\red246\green246\blue246;\red0\green0\blue0;\red99\green99\blue99;\red38\green38\blue38;
\red237\green237\blue237;\red252\green251\blue251;\red12\green99\blue160;\red0\green57\blue84;\red44\green44\blue44;
\red44\green154\blue192;\red230\green241\blue245;\red123\green83\blue30;\red187\green81\blue85;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid301\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid501\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid801\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1001\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1301\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid14}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl460\partightenfactor0

\f0\fs38 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Review Question 1\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\fs32 \cf4 \cb3 \strokec4 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf5 \strokec5 Have a look at the following comparison:
\f1\fs26 \cb6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf5 5 >= 5\
\pard\pardeftab720\sl400\partightenfactor0

\fs28 \cf5 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f0\fs32 \cf5 \cb1 \
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf5 \cb3 What is the result of this comparison?\cb1 \
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \cb3 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  An error. This is incorrect syntax.\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 None
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  \
\pard\pardeftab720\sl384\partightenfactor0
\cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 <code>True</code> - correct\
\pard\pardeftab720\sl384\partightenfactor0
\cf2 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 False
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf8 \cb3 \strokec8 \shad0 EXPLANATION\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\b0\fs32 \cf5 \cb3 \strokec5 The 
\f1\fs28 \cb6 >=
\f0\fs32 \cb3  operator reads as "greater than or equal to". 5 is equal to 5, so the outcome will be 
\f1\fs28 \cb6 True
\f0\fs32 \cb3 .\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\f2\b\fs26 \cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 FINAL CHECK\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf5 \strokec5 \shad0  
\f2\b\fs26 \cf3 \cb12 \strokec3 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 SAVE\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf5 \strokec5 \shad0  \
\pard\pardeftab720\sl300\qc\partightenfactor0

\f2\b\fs26 \cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 TOGGLE ANSWER VISIBILITY\
\pard\pardeftab720\sl300\partightenfactor0
\cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 HIDE ANSWER
\f0\b0\fs32 \cf5 \cb3 \strokec5 \shad0  
\i \cf4 \strokec4 You have used 1 of 2 submissions
\i0 \cf5 \cb1 \strokec5 \
\pard\pardeftab720\sl460\partightenfactor0

\fs38 \cf2 \cb3 \strokec2 Review Question 2\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\fs32 \cf4 \cb3 \strokec4 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf5 \strokec5 Have a look at the following comparison:
\f1\fs26 \cb6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf5 4 != 4\
\pard\pardeftab720\sl400\partightenfactor0

\fs28 \cf5 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f0\fs32 \cf5 \cb1 \
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf5 \cb3 What is the result of this comparison?\cb1 \
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \cb3 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  An error. This is incorrect syntax.\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 None
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 False
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  \
\pard\pardeftab720\sl384\partightenfactor0
\cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 <code>False</code> - correct\
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf8 \strokec8 \shad0 EXPLANATION\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\f1\b0 \cf5 \cb6 \strokec5 !=
\f0\fs32 \cb3  reads as "not equal to". As 4 and 4 are equal, the result of this comparison will be 
\f1\fs28 \cb6 False
\f0\fs32 \cb3 .\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\f2\b\fs26 \cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 FINAL CHECK\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf5 \strokec5 \shad0  
\f2\b\fs26 \cf3 \cb12 \strokec3 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 SAVE\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf5 \strokec5 \shad0  \
\pard\pardeftab720\sl300\qc\partightenfactor0

\f2\b\fs26 \cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 TOGGLE ANSWER VISIBILITY\
\pard\pardeftab720\sl300\partightenfactor0
\cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 HIDE ANSWER
\f0\b0\fs32 \cf5 \cb3 \strokec5 \shad0  
\i \cf4 \strokec4 You have used 1 of 2 submissions
\i0 \cf5 \cb1 \strokec5 \
\pard\pardeftab720\sl460\partightenfactor0

\fs38 \cf2 \cb3 \strokec2 Review Question 3\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\fs32 \cf4 \cb3 \strokec4 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf5 \strokec5 You can use the 
\f1\fs28 \cb6 and
\f0\fs32 \cb3  operator to compare different booleans.\cb1 \
\cb3 What is the characteristic of the 
\f1\fs28 \cb6 and
\f0\fs32 \cb3  operator?\cb1 \
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \cb3 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  The 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 and
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  operator returns 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  only if both operands are 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 . In other words, only
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True and True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  gives 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 . \
\pard\pardeftab720\sl384\partightenfactor0
\cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 The <code>and</code> operator returns <code>True</code> only if both operands are <code>True</code>. In other words, only <code>True and True</code> gives <code>True</code>. - correct\
\pard\pardeftab720\sl384\partightenfactor0
\cf2 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  The 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 and
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  operator returns 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  if exactly one of the operands is 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 . In other words,
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True and False
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  and 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 False and True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  gives 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 . 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True and True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  gives 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 False
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 .\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  The 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 and
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  operator returns 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  if at least one of the operands is 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 . In other words,
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True and False
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 , 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 False and True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  and 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True and True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  all result in 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 .\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf8 \cb3 \strokec8 \shad0 EXPLANATION\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\b0\fs32 \cf5 \cb3 \strokec5 For the case of 
\f1\fs28 \cb6 and
\f0\fs32 \cb3 , both operands have to be 
\f1\fs28 \cb6 True
\f0\fs32 \cb3  to result in 
\f1\fs28 \cb6 True
\f0\fs32 \cb3 .\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\f2\b\fs26 \cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 FINAL CHECK\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf5 \strokec5 \shad0  
\f2\b\fs26 \cf3 \cb12 \strokec3 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 SAVE\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf5 \strokec5 \shad0  \
\pard\pardeftab720\sl300\qc\partightenfactor0

\f2\b\fs26 \cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 TOGGLE ANSWER VISIBILITY\
\pard\pardeftab720\sl300\partightenfactor0
\cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 HIDE ANSWER
\f0\b0\fs32 \cf5 \cb3 \strokec5 \shad0  
\i \cf4 \strokec4 You have used 1 of 2 submissions
\i0 \cf5 \cb1 \strokec5 \
\pard\pardeftab720\sl460\partightenfactor0

\fs38 \cf2 \cb3 \strokec2 Review Question 4\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\fs32 \cf4 \cb3 \strokec4 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf5 \strokec5 You can use the 
\f1\fs28 \cb6 or
\f0\fs32 \cb3  operator to compare different booleans.\cb1 \
\cb3 What is the characteristic of the 
\f1\fs28 \cb6 or
\f0\fs32 \cb3  operator?\cb1 \
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \cb3 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  The 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 or
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  operator returns 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  only if both operands are 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 . In other words, only
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True or True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  gives 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 .\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  The 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 or
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  operator returns 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  if exactly one of the operands is 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 . In other words,
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True or False
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  and 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 False or True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  gives 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 . 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True or True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  gives 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 False
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 .\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  The 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 or
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  operator returns 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  if at least one of the operands is 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 . In other words,
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True or False
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 , 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 False or True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  and 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True or True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  all result in 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 True
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 . \
\pard\pardeftab720\sl384\partightenfactor0
\cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 The <code>or</code> operator returns <code>True</code> if at least one of the operands is <code>True</code>. In other words, <code>True or False</code>, <code>False or True</code> and <code>True or True</code> all result in <code>True</code>. - correct\
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf8 \strokec8 \shad0 EXPLANATION\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\b0\fs32 \cf5 \cb3 \strokec5 For the case of 
\f1\fs28 \cb6 or
\f0\fs32 \cb3 , at least one operand should be 
\f1\fs28 \cb6 True
\f0\fs32 \cb3  for the 
\f1\fs28 \cb6 or
\f0\fs32 \cb3  operation to result in 
\f1\fs28 \cb6 True
\f0\fs32 \cb3 .\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\f2\b\fs26 \cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 FINAL CHECK\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf5 \strokec5 \shad0  
\f2\b\fs26 \cf3 \cb12 \strokec3 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 SAVE\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf5 \strokec5 \shad0  \
\pard\pardeftab720\sl300\qc\partightenfactor0

\f2\b\fs26 \cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 TOGGLE ANSWER VISIBILITY\
\pard\pardeftab720\sl300\partightenfactor0
\cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 HIDE ANSWER
\f0\b0\fs32 \cf5 \cb3 \strokec5 \shad0  
\i \cf4 \strokec4 You have used 1 of 2 submissions
\i0 \cf5 \cb1 \strokec5 \
\pard\pardeftab720\sl460\partightenfactor0

\fs38 \cf2 \cb3 \strokec2 Review Question 5\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\fs32 \cf4 \cb3 \strokec4 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf5 \strokec5 Things get really interesting once you can use the results of comparisons and boolean operations in a control structure. Have a look at the example below:
\f1\fs26 \cb6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf5 x = 5\
if x > 6 :\
    print("high")\
else :\
    print("low")\
\pard\pardeftab720\sl400\partightenfactor0

\fs28 \cf5 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f0\fs32 \cf5 \cb1 \
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf5 \cb3 What will be printed out if you execute this piece of code?\cb1 \
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \cb3 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  Nothing. An error gets thrown as the syntax is incorrect.\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 low
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  \
\pard\pardeftab720\sl384\partightenfactor0
\cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 <code>low</code> - correct\
\pard\pardeftab720\sl384\partightenfactor0
\cf2 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 high
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 None
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf8 \cb3 \strokec8 \shad0 EXPLANATION\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\f1\b0 \cf5 \cb6 \strokec5 x > 6
\f0\fs32 \cb3  is 
\f1\fs28 \cb6 False
\f0\fs32 \cb3  when 
\f1\fs28 \cb6 x
\f0\fs32 \cb3  equals 5, so Python heads over to the 
\f1\fs28 \cb6 else
\f0\fs32 \cb3  part of the construct. 
\f1\fs28 \cb6 "low"
\f0\fs32 \cb3 gets printed.\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\f2\b\fs26 \cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 FINAL CHECK\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf5 \strokec5 \shad0  
\f2\b\fs26 \cf3 \cb12 \strokec3 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 SAVE\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf5 \strokec5 \shad0  \
\pard\pardeftab720\sl300\qc\partightenfactor0

\f2\b\fs26 \cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 TOGGLE ANSWER VISIBILITY\
\pard\pardeftab720\sl300\partightenfactor0
\cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 HIDE ANSWER
\f0\b0\fs32 \cf5 \cb3 \strokec5 \shad0  
\i \cf4 \strokec4 You have used 1 of 2 submissions
\i0 \cf5 \cb1 \strokec5 \
\pard\pardeftab720\sl460\partightenfactor0

\fs38 \cf2 \cb3 \strokec2 Review Question 6\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\fs32 \cf4 \cb3 \strokec4 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf5 \strokec5 If your control structures get more advanced, Python can take many different paths through your code. It is very important to understand how Python does this.\cb1 \
\cb3 Have a look at the following control structure:
\f1\fs26 \cb6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf5 x = 7\
if x > 6 :\
    print("high")\
elif x > 3 :\
    print("ok")\
else :\
    print("low")\
\pard\pardeftab720\sl400\partightenfactor0

\fs28 \cf5 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f0\fs32 \cf5 \cb1 \
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf5 \cb3 What will be printed out if you execute this piece of code?\cb1 \
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \cb3 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 low
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 ok
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 high
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  \
\pard\pardeftab720\sl384\partightenfactor0
\cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 <code>high</code> - correct\
\pard\pardeftab720\sl384\partightenfactor0
\cf2 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  Both 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 high
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  and 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 ok
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  are printed out.\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf8 \cb3 \strokec8 \shad0 EXPLANATION\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\b0\fs32 \cf5 \cb3 \strokec5 As soon as Python encounters a condition that is 
\f1\fs28 \cb6 True
\f0\fs32 \cb3  (
\f1\fs28 \cb6 x > 6
\f0\fs32 \cb3  in this case), the corresponding code is executed and the control structure is abandoned. The 
\f1\fs28 \cb6 elif
\f0\fs32 \cb3  and 
\f1\fs28 \cb6 else
\f0\fs32 \cb3  parts are not considered anymore!\cb1 \
\
\
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf14 \cb3 \strokec14 Equality\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf3 \cb15 \strokec3 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf14 \cb3 \strokec14 To check if two Python values, or variables, are equal, you can use 
\f1\fs22 \cb16 ==
\f3\fs32 \cb3 . To check for inequality, you need 
\f1\fs22 \cb16 !=
\f3\fs32 \cb3 . As a refresher, have a look at the following examples, that all result in 
\f1\fs22 \cb16 True
\f3\fs32 \cb3 . Feel free to try them out in the IPython Shell.\cb1 \
\pard\pardeftab720\sl200\partightenfactor0

\f1\fs22 \cf9 \cb16 \strokec9 2 == (1 + 1)\
"intermediate" != "python"\
True != False\
"Python" != "python"\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f3\fs32 \cf14 \cb3 \strokec14 When you write these comparisons in a script, you will need to wrap a 
\f1\fs22 \cb16 print()
\f3\fs32 \cb3  function around them, to see the output.\cb1 \
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf15 \cb3 \strokec15 Instructions\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls1\ilvl0
\f3\b0\fs32 \cf14 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 In the editor on the right, write code to see if 
\f1\fs22 \cb16 True
\f3\fs32 \cb3  equals
\f1\fs22 \cb16 False
\f3\fs32 \cb3 .\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Write Python code to check if 
\f1\fs22 \cb16 -5 * 15
\f3\fs32 \cb3  is 
\i not
\i0  equal to 
\f1\fs22 \cb16 75
\f3\fs32 \cb3 .\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Ask Python whether the strings 
\f1\fs22 \cb16 "pyscript"
\f3\fs32 \cb3  and 
\f1\fs22 \cb16 "PyScript"
\f3\fs32 \cb3  are equal.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 What happens if you compare booleans and integers? Write code to see if 
\f1\fs22 \cb16 True
\f3\fs32 \cb3  and 
\f1\fs22 \cb16 1
\f3\fs32 \cb3  are equal.\
\pard\tx720\pardeftab720\sl480\partightenfactor0
\cf14 # Comparison of booleans\
print(True == False)\
\
# Comparison of integers\
print (-5 * 15 != 75)\
\
# Comparison of strings\
print ("pyscript" == "PyScript")\
\
# Compare a boolean with an integer\
print(True == 1)\cb1 \
\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf17 \cb3 \strokec17 <script.py> output:\
    False\
    True\
    False\
    True\
\pard\tx720\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf14 \cb1 \strokec14 \
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf14 \cb3 Greater and less than\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf3 \cb15 \strokec3 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf14 \cb3 \strokec14 In the video, Filip also talked about the less than and greater than signs, 
\f1\fs22 \cb16 <
\f3\fs32 \cb3  and 
\f1\fs22 \cb16 >
\f3\fs32 \cb3  in Python. You can combine them with an equals sign: 
\f1\fs22 \cb16 <=
\f3\fs32 \cb3  and 
\f1\fs22 \cb16 >=
\f3\fs32 \cb3 . Pay attention: 
\f1\fs22 \cb16 <=
\f3\fs32 \cb3  is valid syntax, 
\f1\fs22 \cb16 =<
\f3\fs32 \cb3  is not.\cb1 \
\cb3 All Python expressions in the following code chunk evaluate to 
\f1\fs22 \cb16 True
\f3\fs32 \cb3 :\cb1 \
\pard\pardeftab720\sl200\partightenfactor0

\f1\fs22 \cf9 \cb16 \strokec9 3 < 4\
3 <= 4\
"alpha" <= "beta"\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f3\fs32 \cf14 \cb3 \strokec14 Remember that for string comparison, Python determines the relationship based on alphabetical order.\cb1 \
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf15 \cb3 \strokec15 Instructions\cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f3\b0\fs32 \cf14 \cb3 \strokec14 Write Python expressions, wrapped in a 
\f1\fs22 \cb16 print()
\f3\fs32 \cb3  function, to check whether:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl200\partightenfactor0
\ls2\ilvl0
\f1\fs22 \cf14 \cb16 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 x
\f3\fs32 \cb3  is greater than or equal to 
\f1\fs22 \cb16 -10
\f3\fs32 \cb3 . 
\f1\fs22 \cb16 x
\f3\fs32 \cb3  has already been defined for you.\cb1 \
\ls2\ilvl0
\f1\fs22 \cb16 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 "test"
\f3\fs32 \cb3  is less than or equal to 
\f1\fs22 \cb16 y
\f3\fs32 \cb3 . 
\f1\fs22 \cb16 y
\f3\fs32 \cb3  has already been deinfed for you.\cb1 \
\ls2\ilvl0
\f1\fs22 \cb16 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 True
\f3\fs32 \cb3  is greater than 
\f1\fs22 \cb16 False
\f3\fs32 \cb3 .\cb1 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 \
\pard\tx720\pardeftab720\sl200\partightenfactor0
\cf14 # Comparison of integers\
x = -3 * 6\
\
\
# Comparison of strings\
y = "test"\
\
\
# Comparison of booleans\
print (x >= -10)\
print("test" <= y)\
print(True > False)\
\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf17 \cb3 \strokec17 <script.py> output:\
    False\
    True\
    True\cf9 \strokec9 \
\pard\tx720\pardeftab720\sl200\partightenfactor0

\f3\fs32 \cf14 \cb1 \strokec14 \
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf14 \cb3 and, or, not (1)\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf3 \cb15 \strokec3 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf14 \cb3 \strokec14 A boolean is either 
\f1\fs22 \cb16 1
\f3\fs32 \cb3  or 
\f1\fs22 \cb16 0
\f3\fs32 \cb3 , 
\f1\fs22 \cb16 True
\f3\fs32 \cb3  or 
\f1\fs22 \cb16 False
\f3\fs32 \cb3 . With boolean operators, such as 
\f1\fs22 \cb16 and
\f3\fs32 \cb3 , 
\f1\fs22 \cb16 or
\f3\fs32 \cb3  and 
\f1\fs22 \cb16 not
\f3\fs32 \cb3 , you can combine these booleans to perform more advanced queries on your data.\cb1 \
\cb3 In the sample code on the right, two variables are defined: 
\f1\fs22 \cb16 my_kitchen
\f3\fs32 \cb3  and 
\f1\fs22 \cb16 your_kitchen
\f3\fs32 \cb3 , representing areas.\cb1 \
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf15 \cb3 \strokec15 Instructions\cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f3\b0\fs32 \cf14 \cb3 \strokec14 Write Python expressions, wrapped in a 
\f1\fs22 \cb16 print()
\f3\fs32 \cb3  function, to check whether:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl200\partightenfactor0
\ls3\ilvl0
\f1\fs22 \cf14 \cb16 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 my_kitchen
\f3\fs32 \cb3  is bigger than 10 and smaller than 18.\cb1 \
\ls3\ilvl0
\f1\fs22 \cb16 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 my_kitchen
\f3\fs32 \cb3  is smaller than 14 or bigger than 17.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls3\ilvl0\cf14 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 double the area of 
\f1\fs22 \cb16 my_kitchen
\f3\fs32 \cb3  is smaller than triple the area of 
\f1\fs22 \cb16 your_kitchen
\f3\fs32 \cb3 .\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls4\ilvl0\cf15 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 \
# Define variables\
my_kitchen = 18.0\
your_kitchen = 14.0\
\
# my_kitchen bigger than 10 and smaller than 18?\
print(my_kitchen > 10 and my_kitchen < 18) \
\
# my_kitchen smaller than 14 or bigger than 17?\
print(my_kitchen < 14 or my_kitchen > 17)\
\
# Double my_kitchen smaller than triple your_kitchen?\
print((my_kitchen * 2) < (3 * your_kitchen))\
\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf17 \cb3 \strokec17 <script.py> output:\
    False\
    True\
    True\
\
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf14 \strokec14 and, or, not (2)\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf3 \cb15 \strokec3 50xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf14 \cb3 \strokec14 To see if you completely understood the boolean operators, have a look at the following piece of Python code:\cb1 \
\pard\pardeftab720\sl200\partightenfactor0

\f1\fs22 \cf9 \cb16 \strokec9 x = 8\
y = 9\
not(not(x < 3) and not(y > 14 or y > 10))\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f3\fs32 \cf14 \cb3 \strokec14 What will the result be if you exectue these three commands in the IPython Shell?\cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\i \cf14 \cb3 NB: Notice that 
\f4\fs22 \cb16 not
\f3\fs32 \cb3  has a higher priority than 
\f4\fs22 \cb16 and
\f3\fs32 \cb3  and 
\f4\fs22 \cb16 or
\f3\fs32 \cb3 , it is executed first.
\i0 \cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f2\b \cf15 \cb3 \strokec15 \
\pard\pardeftab720\sl544\partightenfactor0

\b0 \cf15 False\
\
\pard\pardeftab720\sl480\sa300\partightenfactor0

\b\fs48 \cf14 \strokec14 Warmup\
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf3 \cb15 \strokec3 50xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf14 \cb3 \strokec14 To experiment with 
\f1\fs22 \cb16 if
\f3\fs32 \cb3  and 
\f1\fs22 \cb16 else
\f3\fs32 \cb3  a bit, have a look at this code sample:\cb1 \
\pard\pardeftab720\sl200\partightenfactor0

\f1\fs22 \cf9 \cb16 \strokec9 area = 10.0\
if(area < 9) :\
    print("small")\
elif(area < 12) :\
    print("medium")\
else :\
    print("large")\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f3\fs32 \cf14 \cb3 \strokec14 What will the output be if you run this piece of code in the IPython Shell?\
\
\pard\pardeftab720\sl288\partightenfactor0

\f1\fs28 \cf14 \cb16 medium\
\
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf14 \cb3 if\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf3 \cb15 \strokec3 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf14 \cb3 \strokec14 It's time to take a closer look around in your house.\cb1 \
\cb3 Two variables are defined in the sample code: 
\f1\fs22 \cb16 room
\f3\fs32 \cb3 , a string that tells you which room of the house we're looking at, and 
\f1\fs22 \cb16 area
\f3\fs32 \cb3 , the area of that room.\cb1 \
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf15 \cb3 \strokec15 Instructions\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls5\ilvl0
\f3\b0\fs32 \cf14 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Examine the 
\f1\fs22 \cb16 if
\f3\fs32 \cb3  statement that prints out 
\f1\fs22 \cb16 "Looking around in the kitchen."
\f3\fs32 \cb3  if 
\f1\fs22 \cb16 room
\f3\fs32 \cb3 equals 
\f1\fs22 \cb16 "kit"
\f3\fs32 \cb3 .\cb1 \
\ls5\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Write another 
\f1\fs22 \cb16 if
\f3\fs32 \cb3  statement that prints out "big place!" if 
\f1\fs22 \cb16 area
\f3\fs32 \cb3  is greater than 15.\cb1 \
\pard\pardeftab720\sl288\partightenfactor0
\cf14 \
# Define variables\
room = "kit"\
area = 14.0\
\
# if statement for room\
if room == "kit" :\
    print("looking around in the kitchen.")\
\
# if statement for area\
if area > 15 :\
    print("big place!")\
\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf17 \cb3 \strokec17 <script.py> output:\
    looking around in the kitchen.\cf9 \strokec9 \
\pard\pardeftab720\sl288\partightenfactor0

\f3\fs32 \cf14 \cb1 \strokec14 \
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf14 \cb3 Add else\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf3 \cb15 \strokec3 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf14 \cb3 \strokec14 On the right, the 
\f1\fs22 \cb16 if
\f3\fs32 \cb3  construct for 
\f1\fs22 \cb16 room
\f3\fs32 \cb3  has been extended with an 
\f1\fs22 \cb16 else
\f3\fs32 \cb3  statement so that "looking around elsewhere." is printed if the condition 
\f1\fs22 \cb16 room = "kit"
\f3\fs32 \cb3  evaluates to 
\f1\fs22 \cb16 False
\f3\fs32 \cb3 .\cb1 \
\cb3 Can you do a similar thing to add more functionality to the 
\f1\fs22 \cb16 if
\f3\fs32 \cb3  construct for 
\f1\fs22 \cb16 area
\f3\fs32 \cb3 ?\cb1 \
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf15 \cb3 \strokec15 Instructions\cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f3\b0\fs32 \cf14 \cb3 \strokec14 Add an 
\f1\fs22 \cb16 else
\f3\fs32 \cb3  statement to the second control structure so that "pretty small." is printed out if 
\f1\fs22 \cb16 area > 15
\f3\fs32 \cb3  evaluates to 
\f1\fs22 \cb16 False
\f3\fs32 \cb3 .\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls6\ilvl0\cf15 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 \
\pard\pardeftab720\sl288\partightenfactor0
\cf14 \strokec14 # Define variables\
room = "kit"\
area = 14.0\
\
# if-else construct for room\
if room == "kit" :\
    print("looking around in the kitchen.")\
else :\
    print("looking around elsewhere.")\
\
# if-else construct for area\
if area > 15 :\
    print("big place!")\
else:\
    print("pretty small.")\
\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf17 \cb3 \strokec17 <script.py> output:\
    looking around in the kitchen.\
    pretty small.\cf9 \strokec9 \
\pard\pardeftab720\sl288\partightenfactor0

\f3\fs32 \cf14 \cb1 \strokec14 \
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf14 \cb3 Customize further: elif\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf3 \cb15 \strokec3 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf14 \cb3 \strokec14 It's also possible to have a look around in the bedroom: the sample code contains an 
\f1\fs22 \cb16 elif
\f3\fs32 \cb3  part that checks if 
\f1\fs22 \cb16 room
\f3\fs32 \cb3  equals "bed". In that case, "looking around in the bedroom." is printed out.\cb1 \
\cb3 Up to you now: make a similar addition to the second control structure to further customize the messages for different values of 
\f1\fs22 \cb16 area
\f3\fs32 \cb3 .\cb1 \
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf15 \cb3 \strokec15 Instructions\cb1 \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f3\b0\fs32 \cf14 \cb3 \strokec14 Add an 
\f1\fs22 \cb16 elif
\f3\fs32 \cb3  to the second control structure such that "medium size, nice!" is printed out if 
\f1\fs22 \cb16 area
\f3\fs32 \cb3  is greater than 
\f1\fs22 \cb16 10
\f3\fs32 \cb3 .\
\
# Define variables\
room = "bed"\
area = 14.0\
\
# if-elif-else construct for room\
if room == "kit" :\
    print("looking around in the kitchen.")\
elif room == "bed":\
    print("looking around in the bedroom.")\
else :\
    print("looking around elsewhere.")\
\
# if-elif-else construct for area\
if area > 15 :\
    print("big place!")\
elif area > 10 :\
    print("medium size, nice!")\
else :\
    print("pretty small.")\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf17 \cb3 \strokec17 <script.py> output:\
    looking around in the bedroom.\
    medium size, nice!\cf9 \strokec9 \
\pard\pardeftab720\sl288\partightenfactor0

\f3\fs32 \cf14 \cb1 \strokec14 \
\pard\pardeftab720\sl460\partightenfactor0

\f0\fs38 \cf2 \cb3 \strokec2 Review Question 1\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\fs32 \cf4 \cb3 \strokec4 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf5 \strokec5 How is a Pandas DataFrame different from a 2D Numpy array?\cb1 \
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \cb3 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  It's basically one and the same thing; it's just easier to work with Pandas\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  A 2D Numpy array has way more advanced subsetting capabilities than Pandas DataFrames.\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  In Pandas, different columns can contain different types. In 2D Numpy arrays, this is not possible. \
\cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 In Pandas, different columns can contain different types. In 2D Numpy arrays, this is not possible. - correct\
\cf2 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  Pandas DataFrames are harder to create than 2D Numpy arrays.\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf8 \cb3 \strokec8 \shad0 EXPLANATION\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\b0\fs32 \cf5 \cb3 \strokec5 Both Pandas and Numpy offer many different ways of subsetting. 2D Numpy arrays can only contain values of the same basic type, a downside compared to Pandas if you're working on typical Data Science problems.\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\f2\b\fs26 \cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 FINAL CHECK\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf5 \strokec5 \shad0  
\f2\b\fs26 \cf3 \cb12 \strokec3 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 SAVE\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf5 \strokec5 \shad0  \
\pard\pardeftab720\sl300\qc\partightenfactor0

\f2\b\fs26 \cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 TOGGLE ANSWER VISIBILITY\
\pard\pardeftab720\sl300\partightenfactor0
\cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 HIDE ANSWER
\f0\b0\fs32 \cf5 \cb3 \strokec5 \shad0  
\i \cf4 \strokec4 You have used 1 of 2 submissions
\i0 \cf5 \cb1 \strokec5 \
\pard\pardeftab720\sl460\partightenfactor0

\fs38 \cf2 \cb3 \strokec2 Review Question 2\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\fs32 \cf4 \cb3 \strokec4 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf5 \strokec5 What are two characteristics that describe Pandas DataFrame?\cb1 \
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \cb3 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  The rows correspond to observations. \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  The rows correspond to variables.\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  The columns correspond to observations\cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  The columns correspond to variables. \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\pard\pardeftab720\sl448\partightenfactor0

\fs32 \cf7 \cb3 \strokec7 \shad0 The rows correspond to observations., The columns correspond to variables., - correct\
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf8 \strokec8 EXPLANATION\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\b0\fs32 \cf5 \cb3 \strokec5 Rows correspond to observations; columns correspond to variables, or properties, of these observations.\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\f2\b\fs26 \cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 FINAL CHECK\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf5 \strokec5 \shad0  
\f2\b\fs26 \cf3 \cb12 \strokec3 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 SAVE\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf5 \strokec5 \shad0  \
\pard\pardeftab720\sl300\qc\partightenfactor0

\f2\b\fs26 \cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 TOGGLE ANSWER VISIBILITY\
\pard\pardeftab720\sl300\partightenfactor0
\cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 HIDE ANSWER
\f0\b0\fs32 \cf5 \cb3 \strokec5 \shad0  
\i \cf4 \strokec4 You have used 1 of 2 submissions
\i0 \cf5 \cb1 \strokec5 \
\pard\pardeftab720\sl460\partightenfactor0

\fs38 \cf2 \cb3 \strokec2 Review Question 3\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\fs32 \cf4 \cb3 \strokec4 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf5 \strokec5 Which Pandas function do you need to import data from a comma-separated value (CSV) file into a Pandas DataFrame?\cb1 \
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \cb3 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 read_csv()
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  \
\cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 <code>read_csv()</code> - correct\
\cf2 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 read_tsv()
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 read_datafile()
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 read_todf()
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf8 \cb3 \strokec8 \shad0 EXPLANATION\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\f1\b0 \cf5 \cb6 \strokec5 read_csv()
\f0\fs32 \cb3  is the function you need. You can specify a ton of other arguments to customize the way the data is imported. To learn about those, have a look at {\field{\*\fldinst{HYPERLINK "http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html"}}{\fldrslt \cf12 \strokec12 the documentation of 
\f1\fs28 \cb6 read_csv()}}.\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\f2\b\fs26 \cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 FINAL CHECK\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf5 \strokec5 \shad0  
\f2\b\fs26 \cf3 \cb12 \strokec3 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 SAVE\
\pard\pardeftab720\sl300\qc\partightenfactor0
\cf7 \cb3 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc13 YOUR ANSWER\
\pard\pardeftab720\sl448\partightenfactor0

\f0\b0\fs32 \cf5 \strokec5 \shad0  \
\pard\pardeftab720\sl300\qc\partightenfactor0

\f2\b\fs26 \cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 TOGGLE ANSWER VISIBILITY\
\pard\pardeftab720\sl300\partightenfactor0
\cf9 \cb10 \strokec9 \shad\shadx0\shady-20\shadr0\shado255 \shadc11 HIDE ANSWER
\f0\b0\fs32 \cf5 \cb3 \strokec5 \shad0  
\i \cf4 \strokec4 You have used 1 of 2 submissions
\i0 \cf5 \cb1 \strokec5 \
\pard\pardeftab720\sl460\partightenfactor0

\fs38 \cf2 \cb3 \strokec2 Review Question 4\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\fs32 \cf4 \cb3 \strokec4 (1/1 point)\
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf5 \strokec5 You can access data in a Pandas DataFrame in several ways.\cb1 \
\cb3 Which technique should you use to select an entire row by its row label?\cb1 \
\pard\pardeftab720\sl384\partightenfactor0

\fs24 \cf2 \cb3 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 iloc
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 loc
\f0\fs24 \cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  \
\cf7 \strokec7 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 <code>loc</code> - correct\
\cf2 \strokec2 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  Square brackets: 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 [ ]
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\cb3 \shad\shadx0\shady-20\shadr0\shado102 \shadc0  Parentheses: 
\f1\fs22 \cb6 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 ( )
\f0\fs24 \cb1 \shad\shadx0\shady-20\shadr0\shado102 \shadc0 \
\pard\pardeftab720\sl448\sa407\partightenfactor0

\b\fs28 \cf8 \cb3 \strokec8 \shad0 EXPLANATION\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\b0\fs32 \cf5 \cb3 \strokec5 Square brackets are used to get specific columns from a Pandas DataFrame. 
\f1\fs28 \cb6 iloc
\f0\fs32 \cb3  is used if you want to select a row based on its position in the DataFrame, and not based on its row label.\
\
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf14 \strokec14 CSV to DataFrame (1)\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf3 \cb15 \strokec3 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf14 \cb3 \strokec14 The DataFrame is one of Pandas' most important data structures. It's basically a way to store tabular data, where you can label the rows and the columns.\cb1 \
\cb3 In the exercises that follow, you will be working wit vehicle data in different countries. Each observation corresponds to a country, and the columns give information about the number of vehicles per capita, whether people drive left or right, and so on. This data is available in a CSV file, named 
\f1\fs22 \cb16 cars.csv
\f3\fs32 \cb3 . It is available in your current working directory, so the path to the file is simply 
\f1\fs22 \cb16 'cars.csv'
\f3\fs32 \cb3 .\cb1 \
\cb3 To import CSV data into Python as a Pandas DataFrame, you can use 
\f1\fs22 \cb16 read_csv()
\f3\fs32 \cb3 .\cb1 \
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf15 \cb3 \strokec15 Instructions\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls7\ilvl0
\f3\b0\fs32 \cf14 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 To import CSV files, you still need the 
\f1\fs22 \cb16 pandas
\f3\fs32 \cb3  package: import it as 
\f1\fs22 \cb16 pd
\f3\fs32 \cb3 .\cb1 \
\ls7\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Use 
\f1\fs22 \cb16 pd.read_csv()
\f3\fs32 \cb3  to import 
\f1\fs22 \cb16 cars.csv
\f3\fs32 \cb3  data as a DataFrame. Store this dataframe as 
\f1\fs22 \cb16 cars
\f3\fs32 \cb3 .\cb1 \
\ls7\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Print out 
\f1\fs22 \cb16 cars
\f3\fs32 \cb3 . Does everything look OK?\cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\f0 \cf5 \strokec5 \
\pard\pardeftab720\sl288\partightenfactor0

\f3 \cf14 \strokec14 \
# Import pandas as pd\
import pandas as pd\
\
# Import the cars.csv data: cars\
cars = pd.read_csv('cars.csv')\
\
# Print out cars\
print(cars)\
\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf17 \cb3 \strokec17 <script.py> output:\
      Unnamed: 0  cars_per_cap        country drives_right\
    0         US           809  United States         True\
    1        AUS           731      Australia        False\
    2        JAP           588          Japan        False\
    3         IN            18          India        False\
    4         RU           200         Russia         True\
    5        MOR            70        Morocco         True\
    6         EG            45          Egypt         True\
\
\
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf14 \strokec14 CSV to DataFrame (2)\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf3 \cb15 \strokec3 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf14 \cb3 \strokec14 Your 
\f1\fs22 \cb16 read_csv()
\f3\fs32 \cb3  call to import the CSV data didn't generate an error, but the output is not entirely what you'd want: the row labels are imported as another column, that has no name.\cb1 \
\cb3 Remember 
\f1\fs22 \cb16 index_col
\f3\fs32 \cb3 , an argument of 
\f1\fs22 \cb16 read_csv()
\f3\fs32 \cb3  that you can use to specify which column in the CSV file should be used as a row label? Well, that's exactly what you need here!\cb1 \
\cb3 Python code that solves the previous exercise is already included; can you make the appropriate changes to fix the data import?\cb1 \
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf15 \cb3 \strokec15 Instructions\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls8\ilvl0
\f3\b0\fs32 \cf14 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Run the code with 
\i Submit Answer
\i0  and assert that the first column should actually be used as row labels.\cb1 \
\ls8\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Specify the 
\f1\fs22 \cb16 index_col
\f3\fs32 \cb3  argument inside 
\f1\fs22 \cb16 pd.read_csv()
\f3\fs32 \cb3 : set it to 
\f1\fs22 \cb16 0
\f3\fs32 \cb3 , so that the first column is used as row labels.\cb1 \
\ls8\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Has the printout of 
\f1\fs22 \cb16 cars
\f3\fs32 \cb3  improved now?\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls9\ilvl0\cf15 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 \
# Import pandas as pd\
import pandas as pd\
\
# Fix import by including index_col\
cars = pd.read_csv('cars.csv', index_col = 0)\
\
# Print out cars\
print(cars)\
\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf17 \cb3 \strokec17 <script.py> output:\
         cars_per_cap        country drives_right\
    US            809  United States         True\
    AUS           731      Australia        False\
    JAP           588          Japan        False\
    IN             18          India        False\
    RU            200         Russia         True\
    MOR            70        Morocco         True\
    EG             45          Egypt         True\
\
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf14 \strokec14 Square Brackets\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf3 \cb15 \strokec3 100xp\
\pard\pardeftab720\sl480\sa200\partightenfactor0

\fs32 \cf14 \cb3 \strokec14 In the video, you saw that you can index and select Pandas DataFrames in many different ways. The simplest, but the not the most powerful way, is to use square brackets.\cb1 \
\cb3 In the sample code on the right, the same cars data is imported from a CSV files as a Pandas DataFrame. To select only the 
\f1\fs22 \cb16 cars_per_cap
\f3\fs32 \cb3 column from 
\f1\fs22 \cb16 cars
\f3\fs32 \cb3 , you can use:\cb1 \
\pard\pardeftab720\sl200\partightenfactor0

\f1\fs22 \cf9 \cb16 \strokec9 cars['cars_per_cap']\
cars[['cars_per_cap']] \
\pard\pardeftab720\sl480\sa200\partightenfactor0

\f3\fs32 \cf14 \cb3 \strokec14 The single bracket version gives a Pandas Series, the double bracket version gives a Pandas DataFrame.\cb1 \
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf15 \cb3 \strokec15 Instructions\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls10\ilvl0
\f3\b0\fs32 \cf14 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Use single square brackets to print out the 
\f1\fs22 \cb16 country
\f3\fs32 \cb3 column of 
\f1\fs22 \cb16 cars
\f3\fs32 \cb3  as a Pandas Series.\cb1 \
\ls10\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Use double square brackets to print out the 
\f1\fs22 \cb16 country
\f3\fs32 \cb3 column of 
\f1\fs22 \cb16 cars
\f3\fs32 \cb3  as a Pandas DataFrame. Do this by putting 
\f1\fs22 \cb16 country
\f3\fs32 \cb3  in two square brackets this time.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls11\ilvl0\cf15 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 \
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 # Import cars data\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 import pandas as pd\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 cars = pd.read_csv('cars.csv', index_col = 0)\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 \
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 # Print out country column as Pandas Series\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 print(cars['country'])\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 \
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 # Print out country column as Pandas DataFrame\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 print(cars[['country']])\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 \
\pard\pardeftab720\sl300\partightenfactor0
\ls11\ilvl0
\f1\fs22 \cf17 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec17 <script.py> output:\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec17     US     United States\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec17     AUS        Australia\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec17     JAP            Japan\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec17     IN             India\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec17     RU            Russia\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec17     MOR          Morocco\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec17     EG             Egypt\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec17     Name: country, dtype: object\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec17                country\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec17     US   United States\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec17     AUS      Australia\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec17     JAP          Japan\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec17     IN           India\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec17     RU          Russia\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec17     MOR        Morocco\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec17     EG           Egypt\cf9 \strokec9 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls11\ilvl0
\f3\fs32 \cf15 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\cf14 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 With 
\f1\fs22 \cb16 loc
\f3\fs32 \cb3  you can do practically any data selection operation on DataFrames you can think of. 
\f1\fs22 \cb16 loc
\f3\fs32 \cb3  is label-based, which means that you have to specify rows and columns based on their row and column labels.\
\pard\pardeftab720\sl480\sa200\partightenfactor0
\ls11\ilvl0\cf14 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Try out the following commands in the IPython Shell to experiment with
\f1\fs22 \cb16 loc
\f3\fs32 \cb3  to select observations:\
\pard\pardeftab720\sl200\partightenfactor0
\ls11\ilvl0
\f1\fs22 \cf9 \cb16 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 cars.loc['RU']\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 cars.loc[['RU']]\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 cars.loc[['RU', 'AUS']]\
\pard\pardeftab720\sl480\sa200\partightenfactor0
\ls11\ilvl0
\f3\fs32 \cf14 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 As before, code is included that imports the cars data as a Pandas DataFrame.\
\pard\pardeftab720\sl300\partightenfactor0
\ls11\ilvl0
\f1\fs22 \cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 In [3]: cars.loc['RU']\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 Out[3]: \
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 cars_per_cap       200\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 country         Russia\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 drives_right      True\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 Name: RU, dtype: object\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 \
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 In [4]: cars.loc[['RU']]\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 Out[4]: \
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9     cars_per_cap country drives_right\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 RU           200  Russia         True\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 \
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 In [5]: cars.loc[['RU', 'AUS']]\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 Out[5]: \
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9      cars_per_cap    country drives_right\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 RU            200     Russia         True\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 AUS           731  Australia        False\
\pard\tx720\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf15 \cb1 \strokec15 \
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf15 \cb3 Instructions\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls12\ilvl0
\f3\b0\fs32 \cf14 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Use 
\f1\fs22 \cb16 loc
\f3\fs32 \cb3  to select the observation corresponding to Japan as a Series. The label of this row is 
\f1\fs22 \cb16 JAP
\f3\fs32 \cb3 . Make sure to print the resulting Series.\cb1 \
\ls12\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Use 
\f1\fs22 \cb16 loc
\f3\fs32 \cb3  to select the observations for Australia and Egypt as a DataFrame. You can find out about the labels of these rows by inspecting 
\f1\fs22 \cb16 cars
\f3\fs32 \cb3  in the IPython Shell. Make sure to print the resulting DataFrame.\cb1 \
\pard\tx720\pardeftab720\sl480\partightenfactor0
\cf15 \strokec15 \
# Import cars data\
import pandas as pd\
cars = pd.read_csv('cars.csv', index_col = 0)\
\
# Print out observation for Japan\
print(cars.loc['JAP'])\
\
# Print out observations for Australia and Egypt\
print(cars.loc[['AUS', 'EG']])\
\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf17 \cb3 \strokec17 <script.py> output:\
    cars_per_cap      588\
    country         Japan\
    drives_right    False\
    Name: JAP, dtype: object\
         cars_per_cap    country drives_right\
    AUS           731  Australia        False\
    EGY           NaN        NaN          NaN\
\
<script.py> output:\
    cars_per_cap      588\
    country         Japan\
    drives_right    False\
    Name: JAP, dtype: object\
         cars_per_cap    country drives_right\
    AUS           731  Australia        False\
    EG             45      Egypt         True\
\
\pard\pardeftab720\sl480\sa300\partightenfactor0

\f2\b\fs48 \cf14 \strokec14 loc (2)\cb1 \
\pard\pardeftab720\sl480\partightenfactor0

\f3\b0\fs22 \cf3 \cb15 \strokec3 100xp\
\pard\pardeftab720\sl200\sa200\partightenfactor0

\f1 \cf14 \cb16 \strokec14 loc
\f3\fs32 \cb3  also allows you to select both rows and columns from a DataFrame. To experiment, try out the following commands in the IPython Shell.\cb1 \
\pard\pardeftab720\sl200\partightenfactor0

\f1\fs22 \cf9 \cb16 \strokec9 cars.loc['IN', 'cars_per_cap']\
cars.loc[['IN', 'RU'], 'cars_per_cap']\
cars.loc[['IN', 'RU'], ['cars_per_cap', 'country']]\
\pard\pardeftab720\sl480\partightenfactor0

\f2\b\fs32 \cf15 \cb3 \strokec15 \
\pard\pardeftab720\sl300\partightenfactor0

\f1\b0\fs22 \cf9 \strokec9 In [1]: cars.loc['IN', 'cars_per_cap']\
Out[1]: 18\
\
In [2]: cars.loc[['IN', 'RU'], 'cars_per_cap']\
Out[2]: \
IN     18\
RU    200\
Name: cars_per_cap, dtype: int64\
\
In [3]: cars.loc[['IN', 'RU'], ['cars_per_cap', 'country']]\
Out[3]: \
    cars_per_cap country\
IN            18   India\
RU           200  Russia\
\
\pard\pardeftab720\sl320\sa84\partightenfactor0

\f2\b\fs34 \cf15 \strokec15 Instructions\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls13\ilvl0
\f3\b0\fs32 \cf14 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Print out the 
\f1\fs22 \cb16 drives_right
\f3\fs32 \cb3  value of the row corresponding to Morocco (its row label is 
\f1\fs22 \cb16 MOR
\f3\fs32 \cb3 )\cb1 \
\ls13\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 Print out a sub-DataFrame, containing the observations for Russia and Morocco and the columns 
\f1\fs22 \cb16 country
\f3\fs32 \cb3  and 
\f1\fs22 \cb16 drives_right
\f3\fs32 \cb3 .\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\partightenfactor0
\ls14\ilvl0
\f5\b\fs36 \cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		{\field{\*\fldinst{HYPERLINK "https://campus.datacamp.com/"}}{\fldrslt \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \uc0\u8232 }}
\f2\b0\fs22 \cb18 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \uc0\u8232 
\f3\fs32 \cf15 \cb1 \strokec15 \
\pard\tx720\pardeftab720\sl480\partightenfactor0
\cf15 # Import cars data\
import pandas as pd\
cars = pd.read_csv('cars.csv', index_col = 0)\
\
# Print out drives_right value of Morocco\
print(cars.loc['MOR','drives_right'])\
\
# Print sub-DataFrame\
print(cars.loc[['RU','MOR'],['country', 'drives_right']])\
\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs22 \cf17 \cb3 \strokec17 <script.py> output:\
    True\
        drives_right\
    RU          True\
    MOR         True\
\
<script.py> output:\
    True\
         country drives_right\
    RU    Russia         True\
    MOR  Morocco         True\cf9 \strokec9 \
\pard\tx720\pardeftab720\sl480\partightenfactor0

\f3\fs32 \cf15 \cb1 \strokec15 \
}